-- | Defines semantic functions for imports declarations
module {AG.ImportDeclarationSem}
{} -- Exports of this module, empty for none
{
-- Imports
import AG.Sintax
}
include "Sintax.ag"

-- ------------------------------------------------
-- Atomic datas
-- ------------------------------------------------
attr Identifier
    syn scalaIdentifier :: String

sem Identifier
    | Nil  lhs.scalaIdentifier = ""
    | Cons lhs.scalaIdentifier = (@hd :  @tl) ++ " "

-- ------------------------------------------------
-- Import Declaration
-- ------------------------------------------------
attr TypeName PackageOrTypeName
    syn importDeclarationList :: {[String]}

attr ImportDeclaration ImportDeclarations -- J2s
    syn scalaImportDeclaration :: String

sem TypeName
    | TypeName lhs.importDeclarationList = @identifier.scalaIdentifier : @typeName.importDeclarationList
    | NilTypeName lhs.importDeclarationList = []

sem PackageOrTypeName
    | NilPackageOrTypeName  lhs.importDeclarationList = []
    | PackageOrTypeName lhs.importDeclarationList = @identifier.scalaIdentifier : @packageOrTypeName.importDeclarationList

sem ImportDeclaration
    | SingleTypeImportDeclaration lhs.scalaImportDeclaration =
        "import" ++ " " ++ foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @typeName.importDeclarationList
    | TypeImportOnDemandDeclaration lhs.scalaImportDeclaration =
        "import" ++ " " ++
        foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @packageOrTypeName.importDeclarationList ++
        "._"
    | SingleStaticImportDeclaration lhs.scalaImportDeclaration =
        "import" ++ " " ++ foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @typeName.importDeclarationList
    | StaticImportOnDemandDeclaration lhs.scalaImportDeclaration =
        "import" ++ " " ++ foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @typeName.importDeclarationList ++
        "._"

sem ImportDeclarations
    | ImportDeclarations lhs.scalaImportDeclaration =
        @importDeclaration.scalaImportDeclaration ++ "\n" ++ @importDeclarations.scalaImportDeclaration
    | NilImportDeclarations  lhs.scalaImportDeclaration = ""

-- ------------------------------------------------
-- Type declarations
-- ------------------------------------------------
set ScalaAllTypeDeclaration = TypeDeclarations TypeDeclaration
                            Modifiers Modifier
                            TypeParameters TypeParameterList TypeParameter
                            Super
                            Interfaces
                            ClassBodyDeclarations ClassBodyDeclaration
                            Type PrimitiveOrReferenceType TypeZ ArrayType
                            VariableDeclarators VariableDeclarator
                            VariableDeclaratorId VariableDeclaratorIdZ
                            VariableInitializer
                            ReferenceType ArrayType

attr ScalaAllTypeDeclaration
     syn scalaTypeDeclaration :: String

{-
set ScalaCheckVariableDeclarator = VariableDeclarators VariableDeclarator
                                 VariableDeclaratorId VariableDeclaratorIdZ
                                 VariableInitializer
                                 Identifier
                                 Expression
                                 ConditionalOrExpression
                                 UnaryExpression
                                 AssignmentOperator
                                 ConditionalExpression
                                 ArrayInitializer
                                 VariableInitializers
                                 Type
                                 TypeZ
                                 PrimitiveOrReferenceType
                                 ReferenceType
                                 TypeArguments
                                 ZClassOrInterfaceType
                                 ActualTypeArgumentList
                                 ActualTypeArgument
                                 WildcardBounds
                                 ArrayType
                                 Primary
                                 PrimaryNoNewArray
                                 ZPostfixExpression
                                 ZPrimary
                                 PrimaryNNAArrayFieldAccessOrMethodInvocation
                                 NonWildTypeArguments
                                 ArgumentList
                                 ReferenceTypeList
                                 PrimaryNNA
                                 ZPrimaryNoNewArray
                                 PrimitiveType
                                 TypeName
                                 DimExprs
                                 Dims
                                 PrimNNAClassOrInterfaceType
                                 ClassOrInterfaceType
                                 ZCOITTypeDeclSpecifier
                                 ZPostfixExp
                                 ZPrimaryOrExpression

attr ScalaCheckVariableDeclarator
    syn scalaCheckVariableDeclarator :: self
-}


sem TypeDeclarations
    | Cons lhs.scalaTypeDeclaration = @hd.scalaTypeDeclaration ++ "\n" ++ @tl.scalaTypeDeclaration
    | Nil  lhs.scalaTypeDeclaration = ""

sem TypeDeclaration
    | TypeDeclarationClassDeclarationNormalCD lhs.scalaTypeDeclaration =
                              "\n" ++ @modifiers.scalaTypeDeclaration ++
                              "class" ++ " " ++
                              @identifier.scalaIdentifier ++
                              @typeParameters.scalaTypeDeclaration ++
                              @super.scalaTypeDeclaration ++
                              @interfaces.scalaTypeDeclaration ++
                              " { " ++ @classBodyDeclarations.scalaTypeDeclaration ++ "\n} "
    | TypeDeclarationClassDeclarationEnumD lhs.scalaTypeDeclaration = "" -- ToDO modifiers :: Modifiers
                                               -- identifier :: Identifier
                                               -- interfaces :: Interfaces
                                               -- enumBody ::EnumBody
    | TypeDeclarationInterfaceDeclarationNormalInterfaceD lhs.scalaTypeDeclaration = "" -- ToDO  modifiers :: Modifiers
                                                              -- identifier :: Identifier
                                                              -- typeParameters :: TypeParameters
                                                              -- extendsInterfaces :: ExtendsInterfaces
                                                              -- listInterfaceMemberDeclarations :: ListInterfaceMemberDeclaration
    | TypeDeclarationInterfaceDeclarationAnnotationTypeD lhs.scalaTypeDeclaration = "" -- ToDO  modifiers :: Modifiers
                                                             -- identifier :: Identifier
                                                             -- listAnnotationTypeElementDeclaration :: ListAnnotationTypeElementDeclaration
    | TypeDeclarationSemiColon  lhs.scalaTypeDeclaration = "" -- ToDO review how to convert this case to Scala


sem Modifiers
    | Modifiers lhs.scalaTypeDeclaration = @modifier.scalaTypeDeclaration ++ @modifiers.scalaTypeDeclaration  -- ToDO check static final, etc
    | NilModifiers lhs.scalaTypeDeclaration = ""

sem Modifier
    | ModifierAnnotation lhs.scalaTypeDeclaration = "" -- ToDO annotation :: Annotation
    | ModifierPublic lhs.scalaTypeDeclaration = ""
    | ModifierProtected lhs.scalaTypeDeclaration = "protected "
    | ModifierPrivate lhs.scalaTypeDeclaration = "private "
    | ModifierAbstract lhs.scalaTypeDeclaration = "" -- ToDO
    | ModifiersStatic lhs.scalaTypeDeclaration = "val " -- ToDo
    | ModifierFinal lhs.scalaTypeDeclaration = "" -- ToDO
    | ModifierStrictfp lhs.scalaTypeDeclaration = "" -- ToDO
    | FieldModifierTransient lhs.scalaTypeDeclaration = "" -- ToDO
    | FieldModifierVolatile lhs.scalaTypeDeclaration = "" -- ToDO
    | MethodModifierSynchronized lhs.scalaTypeDeclaration = "" -- ToDO
    | MethodModifierNative lhs.scalaTypeDeclaration = "" -- ToDO


sem TypeParameters
    | TypeParametersC1 lhs.scalaTypeDeclaration = "" -- ToDO typeParameterList :: TypeParameterList
    | TypeParametersC2 lhs.scalaTypeDeclaration = "" -- ToDO typeParameterList :: TypeParameterList
    | TypeParametersC3 lhs.scalaTypeDeclaration = "" -- ToDO typeParameterList :: TypeParameterList
    | TypeParametersC0 lhs.scalaTypeDeclaration = "" -- ToDO typeParameterList :: TypeParameterList
    | NilTypeParameters lhs.scalaTypeDeclaration = "" -- ToDO

sem TypeParameterList
    | Cons lhs.scalaTypeDeclaration = "" -- ToDO
    | Nil lhs.scalaTypeDeclaration = "" -- ToDO

sem TypeParameter
    | TypeParameterBound lhs.scalaTypeDeclaration = "" -- ToDO identifier :: Identifier
                          -- typeBound :: TypeBound
    | TypeParameter lhs.scalaTypeDeclaration = "" -- ToDO identifier :: Identifier

sem Super
    | Super lhs.scalaTypeDeclaration = "" -- ToDO  classOrInterfaceType :: ClassOrInterfaceType
    | NilSuper lhs.scalaTypeDeclaration = "" -- ToDO

sem Interfaces
    | Interfaces lhs.scalaTypeDeclaration = "" -- ToDO interfaceTypeList :: InterfaceTypeList
    | NilInterfaces lhs.scalaTypeDeclaration = "" -- ToDO

sem ClassBodyDeclarations
    | Cons lhs.scalaTypeDeclaration = @hd.scalaTypeDeclaration ++ @tl.scalaTypeDeclaration
    | Nil  lhs.scalaTypeDeclaration = "" -- ToDO

{-
{

checkVariableDeclarators :: VariableDeclarators -> String ->  String -> String
checkVariableDeclarators [] _ _ = ""
checkVariableDeclarators ((VariableDeclaratorId variabledeclaratorId):xs) variableDeclarators  type_ = variableDeclarators ++ ": " ++ type_ ++ "= null"
checkVariableDeclarators (x:xs) variableDeclarators type_ = variableDeclarators ++ ": " ++ type_ -- ToDo
}
-}

sem ClassBodyDeclaration
    | ClassBodyDeclClassMemberDeclFieldDeclaration lhs.scalaTypeDeclaration = { "\n\t" ++ @modifiers.scalaTypeDeclaration ++
--                                                                              (checkVariableDeclarators @variableDeclarators.scalaCheckVariableDeclarator @variableDeclarators.scalaTypeDeclaration @type_.scalaTypeDeclaration)
                                                                                @variableDeclarators.scalaTypeDeclaration ++ ":" ++ @type_.scalaTypeDeclaration
                                                                              }
                                                                              -- ToDO type_ :: Type
    | ClassBodyDeclClassMemberDeclMethodDeclaration lhs.scalaTypeDeclaration = "" -- ToDO                     modifiers :: Modifiers
                                                                       -- typeParameters :: TypeParameters
                                                                       -- resultType :: ResultType
                                                                       -- methosDeclarator :: MethodDeclarator
                                                                       -- throws :: Throws
                                                                       -- methodBody :: MethodBody
    | ClassBodyDeclClassMemberDeclClassDeclarationNormalCD lhs.scalaTypeDeclaration = " ClassBodyDeclClassMemberDeclClassDeclarationNormalCD ???? " -- ToDO              modifiers :: Modifiers
                                                                       -- identifier :: Identifier
                                                                       -- typeParameters :: TypeParameters
                                                                       -- super :: Super
                                                                       -- interfaces :: Interfaces
                                                                       -- classBodyDeclarations :: ClassBodyDeclarations
    | ClassBodyDeclClassMemberDeclClassDeclarationEnumD lhs.scalaTypeDeclaration = "" -- ToDO                 modifiers :: Modifiers
                                                                       -- identifier :: Identifier
                                                                       -- interfaces :: Interfaces
                                                                       -- enumBody :: EnumBody
    | ClassBodyDeclClassMemberDeclInterfaceDeclarationNormalInterfaceD  lhs.scalaTypeDeclaration = "" -- ToDO modifiers :: Modifiers
                                                                       -- identifier :: Identifier
                                                                       -- typeParameters :: TypeParameters
                                                                       -- extendsInterfaces :: ExtendsInterfaces
                                                                       -- listInterfaceMemberDeclaration :: ListInterfaceMemberDeclaration
    | ClassBodyDeclClassMemberDeclInterfaceDeclarationAnnotationTypeD   lhs.scalaTypeDeclaration = "" -- ToDO modifiers :: Modifiers
                                                                       -- identifier :: Identifier
                                                                       -- listAnnotationTypeElementDeclaration :: ListAnnotationTypeElementDeclaration
    | ClassBodyDeclClassMemberDeclSemiColon  lhs.scalaTypeDeclaration = "" -- ToDO
    | ClassBodyInstanceInitializer lhs.scalaTypeDeclaration = "" -- ToDO  blockStatements :: BlockStatements {- Block -- InstanceInitializer -}
    | ClassBodyStaticInitializer lhs.scalaTypeDeclaration = "" -- ToDO  blockStatements :: BlockStatements {- StaticInitializer -}
    | ClassBodyConstructorDeclaration lhs.scalaTypeDeclaration = "" -- ToDO  modifiers :: Modifiers
                                       -- typeParameters :: TypeParameters
                                       -- identifier :: Identifier
                                       -- formalParameterList :: FormalParameterList
                                       -- throws :: Throws
                                       -- constructorBody :: ConstructorBody
    | ClassBodyConstructorDeclarationNoFormalParList lhs.scalaTypeDeclaration = "" -- ToDO  modifiers :: Modifiers
                                                     -- typeParameters :: TypeParameters
                                                     -- identifiers :: Identifier
                                                     -- throws :: Throws
                                                     -- constructorBody :: ConstructorBody
sem Type  -- ToDo check
    | TypePrimitiveType lhs.scalaTypeDeclaration = @primitiveOrReferenceType.scalaTypeDeclaration ++
                                                   @typeZ.scalaTypeDeclaration
sem TypeZ
    | Cons lhs.scalaTypeDeclaration = @hd.scalaTypeDeclaration ++ @tl.scalaTypeDeclaration
    | Nil  lhs.scalaTypeDeclaration = ""

sem ArrayType
    | ArrayType lhs.scalaTypeDeclaration = "" -- ToDO

sem PrimitiveOrReferenceType
    | TypePrimitiveNumericType_TypeIntegral_Byte lhs.scalaTypeDeclaration = "" -- ToDo
    | TypePrimitiveNumericType_TypeIntegral_Short lhs.scalaTypeDeclaration = "" -- ToDo
    | TypePrimitiveNumericType_TypeIntegral_Int lhs.scalaTypeDeclaration = "" -- ToDo
    | TypePrimitiveNumericType_TypeIntegral_Long lhs.scalaTypeDeclaration = "" -- ToDo
    | TypePrimitiveNumericType_TypeIntegral_Char lhs.scalaTypeDeclaration = "" -- ToDo
    | TypePrimitiveNumericType_TypeFloating_Float lhs.scalaTypeDeclaration = "" -- ToDo
    | TypePrimitiveNumericType_TypeFloating_Double lhs.scalaTypeDeclaration = "" -- ToDo
    | TypePrimitivePrimitivetypeBoolean lhs.scalaTypeDeclaration = "" -- ToDo
    | TypeReference lhs.scalaTypeDeclaration = @referenceType.scalaTypeDeclaration -- ToDo

sem ReferenceType
    | ReferenceTypeClassOrInterfaceType  lhs.scalaTypeDeclaration =  @identifier.scalaIdentifier ++ " "
                                        -- ToDO typeArguments :: TypeArguments
                                        -- ToDO zClassOrInterfaceType :: ZClassOrInterfaceType
sem VariableDeclarators
    | Cons lhs.scalaCheckVariableDeclarator = @hd.scalaCheckVariableDeclarator : @tl.scalaCheckVariableDeclarator
           lhs.scalaTypeDeclaration = @hd.scalaTypeDeclaration ++ @tl.scalaTypeDeclaration
    | Nil  lhs.scalaCheckVariableDeclarator  = []
           lhs.scalaTypeDeclaration = ""

--    | Cons lhs.scalaCheckVariableDeclarator = @hd.scalaCheckVariableDeclarator ++ @tl.scalaCheckVariableDeclarator
--        | Nil lhs.scalaCheckVariableDeclarator  = []

--sem VariableDeclarator
--    | VariableDeclaratorId lhs.scalaTypeDeclaration = @variableDeclaratorId.scalaTypeDeclaration -- ToDo variableDeclaratorId :: VariableDeclaratorId
--    | VariableDeclaratorIdAsig lhs.scalaTypeDeclaration = @variableDeclaratorId.scalaTypeDeclaration ++ @variableInitializer.scalaTypeDeclaration  -- ToDo variableDeclaratorId :: VariableDeclaratorId
                               -- variableInitializer :: VariableInitializer

sem VariableDeclarator
    | VariableDeclaratorId -- lhs.scalaCheckVariableDeclarator = {VariableDeclaratorId @variableDeclaratorId.scalaCheckVariableDeclarator }
                           lhs.scalaTypeDeclaration = @variableDeclaratorId.scalaTypeDeclaration -- ToDo variableDeclaratorId :: VariableDeclaratorId
    | VariableDeclaratorIdAsig -- lhs.scalaCheckVariableDeclarator = { VariableDeclaratorIdAsig @variableDeclaratorId.scalaCheckVariableDeclarator @variableInitializer.scalaCheckVariableDeclarator }
                           lhs.scalaTypeDeclaration = @variableDeclaratorId.scalaTypeDeclaration ++ @variableInitializer.scalaTypeDeclaration  -- ToDo variableDeclaratorId :: VariableDeclaratorId


sem VariableDeclaratorId
    | VarDeclaratorId -- lhs.scalaCheckVariableDeclarator = {VarDeclaratorId @identifier.scalaIdentifier}
                      lhs.scalaTypeDeclaration = @identifier.scalaIdentifier
    | VarDeclaratorIdVDZ -- lhs.scalaCheckVariableDeclarator = {VarDeclaratorIdVDZ @identifier.scalaIdentifier @variableDeclaratorIdZ.scalaCheckVariableDeclarator}
                      lhs.scalaTypeDeclaration = @identifier.scalaIdentifier ++ " " ++ @variableDeclaratorIdZ.scalaTypeDeclaration

sem VariableDeclaratorIdZ
    | VarDeclaratorIdCorchete -- lhs.scalaCheckVariableDeclarator = { VarDeclaratorIdCorchete }
                              lhs.scalaTypeDeclaration = "[]" -- ToDo
    | VarDeclaratorIdZ -- lhs.scalaCheckVariableDeclarator = { VarDeclaratorIdZ  @variableDeclaratorIdZ.scalaCheckVariableDeclarator }
                       lhs.scalaTypeDeclaration = @variableDeclaratorIdZ.scalaTypeDeclaration -- ToDo

sem VariableInitializer
    | VariableInitializerExp lhs.scalaTypeDeclaration = "" -- ToDo expression :: Expression
    | VariableInitializerArr lhs.scalaTypeDeclaration = "" -- ToDo attayInitializer :: ArrayInitializer


-- ------------------------------------------------
--
-- ------------------------------------------------

--sem VariableDeclarators
--    | Cons lhs.scalaCheckVariableDeclarator = @hd.scalaCheckVariableDeclarator ++ @tl.scalaCheckVariableDeclarator
--    | Nil lhs.scalaCheckVariableDeclarator  = []


--sem VariableDeclarator
--    | VariableDeclaratorId lhs.scalaCheckVariableDeclarator = (VariableDeclaratorId @variableDeclaratorId) : []
--    | VariableDeclaratorIdAsig lhs.scalaCheckVariableDeclarator = (VariableDeclaratorIdAsig @variableDeclaratorId @variableInitializer) : []

-- ------------------------------------------------
-- J2S scala code
-- ------------------------------------------------
attr J2s
     syn scalaCode :: String

sem J2s
    | J2s lhs.scalaCode = @importDeclarations.scalaImportDeclaration ++
                          @typeDeclarations.scalaTypeDeclaration

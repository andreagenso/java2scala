-- | Defines semantic functions for imports declarations
module {AG.ImportDeclarationSem}
{} -- Exports of this module, empty for none
{
-- Imports
import AG.Sintax
}
include "Sintax.ag"

--  ImportDeclaration ImportDeclarations J2s
attr Identifier
    syn importStr :: String

attr TypeName PackageOrTypeName
    syn importDeclarationList :: {[String]}

attr ImportDeclaration ImportDeclarations J2s
    syn importDeclaration :: String

sem Identifier
    | Nil  lhs.importStr = ""
    | Cons lhs.importStr = @hd : @tl

sem TypeName
    | TypeName lhs.importDeclarationList = @identifier.importStr : @typeName.importDeclarationList
    | NilTypeName lhs.importDeclarationList = []

sem PackageOrTypeName
    | NilPackageOrTypeName  lhs.importDeclarationList = []
    | PackageOrTypeName lhs.importDeclarationList = @identifier.importStr : @packageOrTypeName.importDeclarationList

sem ImportDeclaration
    | SingleTypeImportDeclaration lhs.importDeclaration =
        "import" ++ " " ++ foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @typeName.importDeclarationList
    | TypeImportOnDemandDeclaration lhs.importDeclaration =
        "import" ++ " " ++
        foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @packageOrTypeName.importDeclarationList ++
        "._"
    | SingleStaticImportDeclaration lhs.importDeclaration =
        "import" ++ " " ++ foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @typeName.importDeclarationList
    | StaticImportOnDemandDeclaration lhs.importDeclaration =
        "import" ++ " " ++ foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @typeName.importDeclarationList ++
        "._"

sem ImportDeclarations
    | ImportDeclarations lhs.importDeclaration =
        @importDeclaration.importDeclaration ++ "\n" ++ @importDeclarations.importDeclaration
    | NilImportDeclarations  lhs.importDeclaration = ""

sem J2s
    | J2s lhs.importDeclaration = @importDeclarations.importDeclaration

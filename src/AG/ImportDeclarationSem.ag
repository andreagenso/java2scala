-- | Defines semantic functions for imports declarations
module {AG.ImportDeclarationSem}
{} -- Exports of this module, empty for none
{
-- Imports
import AG.Sintax
}
include "Sintax.ag"

--  ImportDeclaration ImportDeclarations J2s
attr Identifier
    syn importStr :: String

attr TypeName PackageOrTypeName
    syn importDeclarationList :: {[String]}

attr ImportDeclaration ImportDeclarations -- J2s
    syn scalaImportDeclaration :: String

sem Identifier
    | Nil  lhs.importStr = ""
    | Cons lhs.importStr = importStr_Syn_Identifier (wrap_Identifier @tl Inh_Identifier) --@hd :  @tl

sem TypeName
    | TypeName lhs.importDeclarationList = @identifier.importStr : @typeName.importDeclarationList
    | NilTypeName lhs.importDeclarationList = []

sem PackageOrTypeName
    | NilPackageOrTypeName  lhs.importDeclarationList = []
    | PackageOrTypeName lhs.importDeclarationList = @identifier.importStr : @packageOrTypeName.importDeclarationList

sem ImportDeclaration
    | SingleTypeImportDeclaration lhs.scalaImportDeclaration =
        "import" ++ " " ++ foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @typeName.importDeclarationList
    | TypeImportOnDemandDeclaration lhs.scalaImportDeclaration =
        "import" ++ " " ++
        foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @packageOrTypeName.importDeclarationList ++
        "._"
    | SingleStaticImportDeclaration lhs.scalaImportDeclaration =
        "import" ++ " " ++ foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @typeName.importDeclarationList
    | StaticImportOnDemandDeclaration lhs.scalaImportDeclaration =
        "import" ++ " " ++ foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @typeName.importDeclarationList ++
        "._"

sem ImportDeclarations
    | ImportDeclarations lhs.scalaImportDeclaration =
        @importDeclaration.scalaImportDeclaration ++ "\n" ++ @importDeclarations.scalaImportDeclaration
    | NilImportDeclarations  lhs.scalaImportDeclaration = ""

-- sem J2s
--    | J2s lhs.importDeclaration = @importDeclarations.importDeclaration


attr J2s
     syn scalaCode :: String

sem J2s
    | J2s lhs.scalaCode = @importDeclarations.scalaImportDeclaration ++
                          @typeDeclarations.scalaTypeDeclaration




set ScalaAllTypeDeclaration = TypeDeclarations TypeDeclaration
                            Modifiers Modifier
                            Identifier
                            TypeParameters TypeParameterList
                            Super
                            Interfaces
                            ClassBodyDeclarations ClassBodyDeclaration
                            Type PrimitiveOrReferenceType TypeZ ArrayType
                            VariableDeclarators VariableDeclarator
                            VariableDeclaratorId VariableDeclaratorIdZ

attr ScalaAllTypeDeclaration
     syn scalaTypeDeclaration :: String

sem PrimitiveOrReferenceType
    | TypePrimitiveNumericType_TypeIntegral_Byte lhs.scalaTypeDeclaration = ""
    | TypePrimitiveNumericType_TypeIntegral_Short lhs.scalaTypeDeclaration = ""
    | TypePrimitiveNumericType_TypeIntegral_Int lhs.scalaTypeDeclaration = ""
    | TypePrimitiveNumericType_TypeIntegral_Long lhs.scalaTypeDeclaration = ""
    | TypePrimitiveNumericType_TypeIntegral_Char lhs.scalaTypeDeclaration = ""
    | TypePrimitiveNumericType_TypeFloating_Float lhs.scalaTypeDeclaration = ""
    | TypePrimitiveNumericType_TypeFloating_Double lhs.scalaTypeDeclaration = ""
    | TypePrimitivePrimitivetypeBoolean lhs.scalaTypeDeclaration = ""
    | TypeReference lhs.scalaTypeDeclaration = "" -- referenceType :: ReferenceType

sem J2s
    | J2s lhs.scalaTypeDeclaration = ""

module {AG.J2SAttrSem}
{} -- Exports of this module, empty for none
{
import Data.List
}
include "Syntax.ag"

-- ------------------------------------------------
-- Import Declaration
-- ------------------------------------------------
attr TypeName PackageOrTypeName
    syn importDeclarationList :: {[String]}

attr ImportDeclaration ImportDeclarations
    syn scalaImportDeclaration :: String

sem TypeName
    | TypeName lhs.importDeclarationList = @identifier : @typeName.importDeclarationList
    | NilTypeName lhs.importDeclarationList = []

sem PackageOrTypeName
    | NilPackageOrTypeName  lhs.importDeclarationList = []
    | PackageOrTypeName lhs.importDeclarationList = @identifier : @packageOrTypeName.importDeclarationList

sem ImportDeclaration
    | SingleTypeImportDeclaration lhs.scalaImportDeclaration =
        "import" ++ " " ++ foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @typeName.importDeclarationList
    | TypeImportOnDemandDeclaration lhs.scalaImportDeclaration =
        "import" ++ " " ++
        foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @packageOrTypeName.importDeclarationList ++
        "._"
    | SingleStaticImportDeclaration lhs.scalaImportDeclaration =
        "import" ++ " " ++ foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @typeName.importDeclarationList
    | StaticImportOnDemandDeclaration lhs.scalaImportDeclaration =
        "import" ++ " " ++ foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @typeName.importDeclarationList ++
        "._"

sem ImportDeclarations
    | ImportDeclarations lhs.scalaImportDeclaration =
        @importDeclaration.scalaImportDeclaration ++ "\n" ++ @importDeclarations.scalaImportDeclaration
    | NilImportDeclarations  lhs.scalaImportDeclaration = ""

-- ------------------------------------------------
-- Type declarations
-- ------------------------------------------------
set ScalaAllNTab = ClassBodyDeclaration
                         VariableDeclarators
                         VariableDeclarator
                         VariableDeclaratorId VariableDeclaratorIdZ
                         VariableInitializer
                         VariableInitializers

set ScalaAllTypeDeclaration = TypeDeclarations TypeDeclaration
                            TypeParameters TypeParameterList TypeParameter
                            Super
                            Interfaces
                            ClassBodyDeclarations ClassBodyDeclaration

attr ScalaAllTypeDeclaration
     syn scalaTypeDeclaration :: String

set ScalaFieldDeclaration = ClassBodyDeclaration VariableDeclarators VariableDeclarator
                         VariableDeclaratorId VariableDeclaratorIdZ
                         VariableInitializer
                         VariableInitializers
                         Type
                         PrimitiveOrReferenceType
                         ReferenceType
                         Modifiers
                         Modifier

attr ScalaAllNTab
    chn scalaNTab :: String

-- modifiers type variableName
{
-- Modifier isStatic isFinal
type TypeModifierIsStaticIsFinal = (String, Bool, Bool)
-- Modifiers Types Variables
type TypeFieldDeclaration = ([TypeModifierIsStaticIsFinal], String, String)
}
attr ScalaFieldDeclaration
    chn scalaFieldDeclaration :: {[TypeFieldDeclaration]}

sem TypeDeclarations
    | Cons lhs.scalaTypeDeclaration = @hd.scalaTypeDeclaration ++ "\n" ++ @tl.scalaTypeDeclaration
    | Nil  lhs.scalaTypeDeclaration = ""

sem TypeDeclaration
    | TypeDeclarationClassDeclarationNormalCD
                              modifiers.scalaFieldDeclaration = []
                              lhs.scalaTypeDeclaration =
                                  -- ToDo check Modifier of class "\n" ++ @modifiers.scalaTypeDeclaration ++
                                  "\nclass" ++ " " ++
                                  @identifier ++
                                  @typeParameters.scalaTypeDeclaration ++
                                  @super.scalaTypeDeclaration ++
                                  @interfaces.scalaTypeDeclaration ++
                                  " { " ++ @classBodyDeclarations.scalaTypeDeclaration ++ "\n} \n"

    | TypeDeclarationClassDeclarationEnumD
                                modifiers.scalaFieldDeclaration = []
                                lhs.scalaTypeDeclaration = "" -- ToDO modifiers :: Modifiers
    | TypeDeclarationInterfaceDeclarationNormalInterfaceD
                                modifiers.scalaFieldDeclaration = []
                                lhs.scalaTypeDeclaration = "" -- ToDO  modifiers :: Modifiers
    | TypeDeclarationInterfaceDeclarationAnnotationTypeD
                                modifiers.scalaFieldDeclaration = []
                                lhs.scalaTypeDeclaration = "" -- ToDO  modifiers :: Modifiers
    | TypeDeclarationSemiColon  lhs.scalaTypeDeclaration = "" -- ToDO review how to convert this case to Scala


{
concatenateModifiers :: [TypeFieldDeclaration] -> TypeFieldDeclaration -> [TypeFieldDeclaration]
concatenateModifiers [] tpl = tpl:[]
concatenateModifiers ((f,s,t):[]) (ftpl, stpl, ttpl) = ((ftpl ++ f), s, t):[]

changeOrderVolatileTransient :: [TypeFieldDeclaration] -> [TypeFieldDeclaration]
changeOrderVolatileTransient modifiers = map (\tdf -> partition' tdf) modifiers
    where
        partition' (ms, t, v) =  ((joinTuple (partition (\(m, _, _) -> (m == "@volatile" || m == "@transient")) ms)), t, v)
        joinTuple (fst, snd) = fst ++ snd
}

sem Modifiers
    | Modifiers
                    modifier.scalaFieldDeclaration = @lhs.scalaFieldDeclaration
                    modifiers.scalaFieldDeclaration = @modifier.scalaFieldDeclaration
                    lhs.scalaFieldDeclaration = changeOrderVolatileTransient @modifiers.scalaFieldDeclaration   -- ToDO check static final, etc
    | NilModifiers  lhs.scalaFieldDeclaration = changeOrderVolatileTransient @lhs.scalaFieldDeclaration

sem Modifier
    | ModifierAnnotation lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", False, False)], "", ""): @lhs.scalaFieldDeclaration)} -- ToDO annotation :: Annotation
    | ModifierPublic lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", False, False)], "", ""): @lhs.scalaFieldDeclaration)}
    | ModifierProtected lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("protected", False, False)], "", ""): @lhs.scalaFieldDeclaration)}
    | ModifierPrivate lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("private", False, False)], "", ""): @lhs.scalaFieldDeclaration)}
    | ModifierAbstract lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", False, False)], "", ""): @lhs.scalaFieldDeclaration)} -- ToDO
    | ModifiersStatic lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", True, False)], "", ""): @lhs.scalaFieldDeclaration)} -- ToDo
    | ModifierFinal lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", False, True)], "", ""): @lhs.scalaFieldDeclaration)} -- ToDO
    | ModifierStrictfp lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", False, False)], "", ""): @lhs.scalaFieldDeclaration)} -- ToDO
    | FieldModifierTransient lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("@transient", False, False)], "", ""): @lhs.scalaFieldDeclaration)} -- ToDO
    | FieldModifierVolatile lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("@volatile", False, False)], "", ""): @lhs.scalaFieldDeclaration)} -- ToDO
    | MethodModifierSynchronized lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", False, False)], "", ""): @lhs.scalaFieldDeclaration)} -- ToDO
    | MethodModifierNative lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", False, False)], "", ""): @lhs.scalaFieldDeclaration)} -- ToDO

sem TypeParameters
    | TypeParametersC1 lhs.scalaTypeDeclaration = "" -- ToDO typeParameterList :: TypeParameterList
    | TypeParametersC2 lhs.scalaTypeDeclaration = "" -- ToDO typeParameterList :: TypeParameterList
    | TypeParametersC3 lhs.scalaTypeDeclaration = "" -- ToDO typeParameterList :: TypeParameterList
    | TypeParametersC0 lhs.scalaTypeDeclaration = "" -- ToDO typeParameterList :: TypeParameterList
    | NilTypeParameters lhs.scalaTypeDeclaration = "" -- ToDO

sem TypeParameterList
    | Cons lhs.scalaTypeDeclaration = "" -- ToDO
    | Nil lhs.scalaTypeDeclaration = "" -- ToDO

sem TypeParameter
    | TypeParameterBound lhs.scalaTypeDeclaration = "" -- ToDO identifier :: Identifier
                          -- typeBound :: TypeBound
    | TypeParameter lhs.scalaTypeDeclaration = "" -- ToDO identifier :: Identifier

sem Super
    | Super lhs.scalaTypeDeclaration = "" -- ToDO  classOrInterfaceType :: ClassOrInterfaceType
    | NilSuper lhs.scalaTypeDeclaration = "" -- ToDO

sem Interfaces
    | Interfaces lhs.scalaTypeDeclaration = "" -- ToDO interfaceTypeList :: InterfaceTypeList
    | NilInterfaces lhs.scalaTypeDeclaration = "" -- ToDO

sem ClassBodyDeclarations
    | Cons
            hd.scalaFieldDeclaration = []
            lhs.scalaTypeDeclaration = @hd.scalaTypeDeclaration ++ @tl.scalaTypeDeclaration
            hd.scalaNTab = ""
    | Nil
            lhs.scalaTypeDeclaration = ""


sem ReferenceTypeList
    | Cons  hd.scalaFieldDeclaration = []

{
checkVariableDeclarators :: [TypeFieldDeclaration] -> String -> String
checkVariableDeclarators [] _ = ""
checkVariableDeclarators ((modifiers, type_, variable):xs)  nTab
            | elemStaticFinal modifiers = "\n" ++ nTab ++ (takeModifiers modifiers) ++ "val "  ++ variable ++ ": " ++ (defaultValueType type_) ++  (checkVariableDeclarators xs nTab)
            | elemStatic modifiers = "\n" ++ nTab ++ (takeModifiers modifiers) ++  "var "  ++ variable ++ ": " ++ (defaultValueType type_) ++  (checkVariableDeclarators xs nTab)
            | elemFinal modifiers = "\n" ++ nTab ++(takeModifiers modifiers) ++ "val "  ++ variable ++ ": " ++ (defaultValueType type_) ++  (checkVariableDeclarators xs nTab)
            | otherwise  = "\n" ++ nTab ++ (takeModifiers modifiers) ++ "var "  ++ variable ++ ": " ++ (defaultValueType type_) ++  (checkVariableDeclarators xs nTab)

elemStatic :: [TypeModifierIsStaticIsFinal] -> Bool
elemStatic [] = False
elemStatic ((_, True, _):modifiers) = True  || elemStatic modifiers
elemStatic (m:modifiers)            = False || elemStatic modifiers

elemFinal :: [TypeModifierIsStaticIsFinal] -> Bool
elemFinal [] = False
elemFinal ((_, _, True):modifiers) = True  || elemFinal modifiers
elemFinal (m:modifiers)            = False || elemFinal modifiers

elemStaticFinal :: [TypeModifierIsStaticIsFinal] -> Bool
elemStaticFinal modifiers = (elemStatic modifiers) && (elemFinal modifiers)

takeModifiers :: [TypeModifierIsStaticIsFinal] -> String
takeModifiers modifiers = foldl takeModifiers' "" modifiers
    where
        takeModifiers' s (fs, t1, t2) = if (fs == "") then s else s ++ fs ++ " "

defaultValueType :: String -> String
defaultValueType type_
            | type_ == "Byte"    = type_ ++ " = 0"
            | type_ == "Short"   = type_ ++ " = 0"
            | type_ == "Int"     = type_ ++ " = 0"
            | type_ == "Long"    = type_ ++ " = 0L"
            | type_ == "Float"   = type_ ++ " = 0"
            | type_ == "Double"  = type_ ++ " = 0.0"
            | type_ == "Char"    = type_ ++ " = \'\\u0000\'"
            | type_ == "Boolean" = type_ ++ " = false"
            | otherwise          = type_ ++ " = null"
}

sem ClassBodyDeclaration
    | ClassBodyDeclClassMemberDeclFieldDeclaration
                        modifiers.scalaFieldDeclaration = @lhs.scalaFieldDeclaration
                        type_.scalaFieldDeclaration = @modifiers.scalaFieldDeclaration
                        variableDeclarators.scalaFieldDeclaration = @type_.scalaFieldDeclaration
                        lhs.scalaTypeDeclaration = {checkVariableDeclarators @variableDeclarators.scalaFieldDeclaration @variableDeclarators.scalaNTab}
                        variableDeclarators.scalaNTab = @lhs.scalaNTab
                        lhs.scalaNTab = @variableDeclarators.scalaNTab

    | ClassBodyDeclClassMemberDeclMethodDeclaration
                        modifiers.scalaFieldDeclaration = []
                        lhs.scalaTypeDeclaration = ""
    | ClassBodyDeclClassMemberDeclClassDeclarationNormalCD
                        lhs.scalaFieldDeclaration = []  -- ToDO              modifiers :: Modifiers
                        lhs.scalaTypeDeclaration = ""
    | ClassBodyDeclClassMemberDeclClassDeclarationEnumD
                        lhs.scalaFieldDeclaration = [] -- ToDO                 modifiers :: Modifiers
                        lhs.scalaTypeDeclaration = ""
    | ClassBodyDeclClassMemberDeclInterfaceDeclarationNormalInterfaceD
                        lhs.scalaFieldDeclaration = [] -- ToDO modifiers :: Modifiers
                        lhs.scalaTypeDeclaration = ""
    | ClassBodyDeclClassMemberDeclInterfaceDeclarationAnnotationTypeD
                        lhs.scalaFieldDeclaration = [] -- ToDO modifiers :: Modifiers
                        lhs.scalaTypeDeclaration = ""
    | ClassBodyDeclClassMemberDeclSemiColon
                        lhs.scalaFieldDeclaration = [] -- ToDO
                        lhs.scalaTypeDeclaration = ""
    | ClassBodyInstanceInitializer
                        lhs.scalaFieldDeclaration = [] -- ToDO  blockStatements :: BlockStatements {- Block -- InstanceInitializer -}
                        lhs.scalaTypeDeclaration = ""
    | ClassBodyStaticInitializer
                        lhs.scalaFieldDeclaration = [] -- ToDO  blockStatements :: BlockStatements {- StaticInitializer -}
                        lhs.scalaTypeDeclaration = ""
    | ClassBodyConstructorDeclaration
                        lhs.scalaFieldDeclaration = [] -- ToDO  modifiers :: Modifiers
                        lhs.scalaTypeDeclaration = ""
    | ClassBodyConstructorDeclarationNoFormalParList
                        lhs.scalaFieldDeclaration = [] -- ToDO  modifiers :: Modifiers
                        lhs.scalaTypeDeclaration = ""

sem Type  -- ToDo check
    | TypePrimitiveType lhs.scalaFieldDeclaration = @primitiveOrReferenceType.scalaFieldDeclaration

{
addTypeToModifiers :: String -> TypeFieldDeclaration -> TypeFieldDeclaration
addTypeToModifiers type_ (modifiers, t, variableDeclarators)  = (modifiers, type_, variableDeclarators)
}

sem PrimitiveOrReferenceType
    | TypePrimitiveNumericType_TypeIntegral_Byte
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Byte") @lhs.scalaFieldDeclaration
    | TypePrimitiveNumericType_TypeIntegral_Short
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Short") @lhs.scalaFieldDeclaration -- ToDo
    | TypePrimitiveNumericType_TypeIntegral_Int
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Int") @lhs.scalaFieldDeclaration -- ToDo
    | TypePrimitiveNumericType_TypeIntegral_Long
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Long") @lhs.scalaFieldDeclaration -- ToDo
    | TypePrimitiveNumericType_TypeIntegral_Char
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Char") @lhs.scalaFieldDeclaration -- ToDo
    | TypePrimitiveNumericType_TypeFloating_Float
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Float") @lhs.scalaFieldDeclaration -- ToDo
    | TypePrimitiveNumericType_TypeFloating_Double
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Double") @lhs.scalaFieldDeclaration -- ToDo
    | TypePrimitivePrimitivetypeBoolean
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Boolean") @lhs.scalaFieldDeclaration -- ToDo
    | TypeReference
                                lhs.scalaFieldDeclaration = @referenceType.scalaFieldDeclaration -- ToDo

sem ReferenceType
    | ReferenceTypeClassOrInterfaceType  lhs.scalaFieldDeclaration =  map (addTypeToModifiers @identifier) @lhs.scalaFieldDeclaration -- ToDo
                                        -- ToDO typeArguments :: TypeArguments
                                        -- ToDO zClassOrInterfaceType :: ZClassOrInterfaceType
sem VariableDeclarators
    | Cons lhs.scalaFieldDeclaration = @hd.scalaFieldDeclaration ++ @tl.scalaFieldDeclaration

           hd.scalaNTab = @lhs.scalaNTab
           tl.scalaNTab = @lhs.scalaNTab
           lhs.scalaNTab = @hd.scalaNTab
    | Nil  lhs.scalaFieldDeclaration  = []
           lhs.scalaNTab = @lhs.scalaNTab


sem VariableDeclaratorId
    | VarDeclaratorId
        lhs.scalaFieldDeclaration = { foldl (\x (fs, tp, _) -> ((fs, tp, @identifier): x))    ([]::[TypeFieldDeclaration]) @lhs.scalaFieldDeclaration }
        lhs.scalaNTab= @lhs.scalaNTab ++ "\t"
    | VarDeclaratorIdVDZ
        lhs.scalaFieldDeclaration = { (foldl (\x (fs, tp, _) -> ((fs, tp, @identifier): x)) ([]::[TypeFieldDeclaration]) @lhs.scalaFieldDeclaration) ++
            @variableDeclaratorIdZ.scalaFieldDeclaration
        }
        lhs.scalaNTab = @lhs.scalaNTab ++ "\t"

sem ResultType
    | ResultTypeType type_.scalaFieldDeclaration = []

sem FormalParameterList
    | FormalParameterListFormal
                                type_.scalaFieldDeclaration = []
                                variableDeclaratorId.scalaFieldDeclaration = []
                                variableDeclaratorId.scalaNTab = ""

    | FormalParameterListLast
                                type_.scalaFieldDeclaration = []
                                variableDeclaratorId.scalaFieldDeclaration = []
                                variableDeclaratorId.scalaNTab = ""

sem ForStatement
    | ForStatementEnhancedForStatementNoVarModif type_.scalaFieldDeclaration = []
    | ForStatementEnhancedForStatement type_.scalaFieldDeclaration = []

sem ForInit
    | ForInitLocalVar
        type_.scalaFieldDeclaration = []
        variableDeclarators.scalaNTab = ""

sem WildcardBounds
    | WilcardBoundsExtendsReferenceType type_.scalaFieldDeclaration = []
    | WilcardBoundsSuperReferenceType type_.scalaFieldDeclaration = []

sem InterfaceMemberDeclaration
    | InterfaceMemberDeclarationConstant
        modifiers.scalaFieldDeclaration = []
        type_.scalaFieldDeclaration = []
        variableDeclarators.scalaFieldDeclaration = []
        variableDeclarators.scalaNTab = ""
    | InterfaceMemberDeclarationAbstract
        modifiers.scalaFieldDeclaration = []
    | InterfaceMemberDeclTypeDeclarationClassDeclarationNormalCD
        modifiers.scalaFieldDeclaration = []
    | InterfaceMemberDeclTypeDeclarationClassDeclarationEnumD
        modifiers.scalaFieldDeclaration = []
    | InterfaceMemberDeclTypeDeclarationInterfaceDeclarationNormalInterfaceD
        modifiers.scalaFieldDeclaration = []
    | InterfaceMemberDeclTypeDeclarationInterfaceDeclarationAnnotationTypeD
        modifiers.scalaFieldDeclaration = []

sem ConditionalOrExpression
    | ConditionalOrExpressionIntanceOf
            type_.scalaFieldDeclaration = []

sem CatchClause
    | CatchClause
        type_.scalaFieldDeclaration = []
        variableDeclaratorId.scalaNTab = ""

sem BlockStatement
    | BlockStatementLocalVariableDeclarationStatement
        modifiers.scalaFieldDeclaration = [] -- ToDo
        type_.scalaFieldDeclaration = [] -- ToDo
        variableDeclarators.scalaNTab = ""
    | BlockStatementClassDeclarationNormalClassDeclaration modifiers.scalaFieldDeclaration = [] -- ToDo
    | BlockStatementClassDeclarationEnumDeclaration        modifiers.scalaFieldDeclaration = [] -- ToDo

sem ArrayInitializer
    | ArrayInitializer
        variableInitializers.scalaFieldDeclaration = [] -- ToDo
        variableInitializers.scalaNTab = "" -- ToDo

sem AnnotationTypeElementDeclaration
    | AnnTypeElemDeclAbstract
        modifiers.scalaFieldDeclaration = [] -- ToDo
        type_.scalaFieldDeclaration = [] -- ToDo
    | AnnTypeElemDeclConstant
        modifiers.scalaFieldDeclaration = [] -- ToDo
        type_.scalaFieldDeclaration = [] -- ToDo
        variableDeclarators.scalaNTab = "" -- ToDo check if is neccesary for parent
    | AnnTypeElemDeclTypeDeclarationClassDeclarationNormalCD
        modifiers.scalaFieldDeclaration = [] -- ToDo
    | AnnTypeElemDeclTypeDeclarationClassDeclarationEnumD
        modifiers.scalaFieldDeclaration = [] -- ToDo
    | AnnTypeElemDeclTypeDeclarationInterfaceDeclarationNormalInterfaceD
        modifiers.scalaFieldDeclaration = [] -- ToDo
    | AnnTypeElemDeclTypeDeclarationInterfaceDeclarationAnnotationTypeD
        modifiers.scalaFieldDeclaration = [] -- ToDo


sem ActualTypeArgument
    | ActualTypeReferenceType type_.scalaFieldDeclaration = [] -- ToDo

-- ------------------------------------------------
-- J2S scala code
-- ------------------------------------------------
attr J2s
     syn scalaCode :: String

sem J2s
    | J2s lhs.scalaCode = @importDeclarations.scalaImportDeclaration ++
                          @typeDeclarations.scalaTypeDeclaration

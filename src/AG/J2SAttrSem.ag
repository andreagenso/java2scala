module {AG.J2SAttrSem}
{} -- Exports of this module, empty for none
{
import Data.List
import qualified Data.Text as T
import Data.String.Utils
}
include "Syntax.ag"

-- ------------------------------------------------
-- Import Declaration
-- ------------------------------------------------
attr TypeName PackageOrTypeName
    syn importDeclarationList :: {[String]}

attr ImportDeclaration ImportDeclarations
    syn scalaImportDeclaration :: String

sem TypeName
    | TypeName
            lhs.importDeclarationList = @identifier : @typeName.importDeclarationList
            lhs.scalaFieldDeclInitialization = pointStr @identifier @typeName.scalaFieldDeclInitialization
    | NilTypeName
            lhs.scalaFieldDeclInitialization = ""
            lhs.importDeclarationList = []

sem PackageOrTypeName
    | NilPackageOrTypeName  lhs.importDeclarationList = []
    | PackageOrTypeName lhs.importDeclarationList = @identifier : @packageOrTypeName.importDeclarationList

sem ImportDeclaration
    | SingleTypeImportDeclaration lhs.scalaImportDeclaration =
        "import" ++ " " ++ foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @typeName.importDeclarationList
    | TypeImportOnDemandDeclaration lhs.scalaImportDeclaration =
        "import" ++ " " ++
        foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @packageOrTypeName.importDeclarationList ++
        "._"
    | SingleStaticImportDeclaration lhs.scalaImportDeclaration =
        "import" ++ " " ++ foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @typeName.importDeclarationList
    | StaticImportOnDemandDeclaration lhs.scalaImportDeclaration =
        "import" ++ " " ++ foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @typeName.importDeclarationList ++
        "._"

sem ImportDeclarations
    | ImportDeclarations lhs.scalaImportDeclaration =
        @importDeclaration.scalaImportDeclaration ++ "\n" ++ @importDeclarations.scalaImportDeclaration
    | NilImportDeclarations  lhs.scalaImportDeclaration = ""

-- ------------------------------------------------
-- Package declaration
-- ------------------------------------------------
set ScalaPackageDeclaration = PackageDeclaration

attr ScalaPackageDeclaration
    syn scalaPackageDeclaration :: String

attr PackageName
    syn scalaPackageDeclarationList :: {[String]}

sem PackageDeclaration
    | PackageDeclaration lhs.scalaPackageDeclaration =
        "package " ++ foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @packageName.scalaPackageDeclarationList ++ "\n\n"
    | NilPackageDeclaration lhs.scalaPackageDeclaration = "\n"

sem PackageName
    | Nil  lhs.scalaPackageDeclarationList = []
    | Cons lhs.scalaPackageDeclarationList = @hd : @tl.scalaPackageDeclarationList

-- ------------------------------------------------
-- Type declarations
-- ------------------------------------------------
set ScalaAllNTab = TypeDeclarations TypeDeclaration
                EnumBody EnumBodyDeclarations EnumConstants EnumConstant
                ListAnnotationTypeElementDeclaration AnnotationTypeElementDeclaration
                ClassBodyDeclarations ClassBodyDeclaration ConstructorBody
                BlockStatements BlockStatement
                MethodBody
                Statement ForStatement
                Catches CatchClause
                SwitchBlock SwitchBlockStatementGroups SwitchBlockStatementGroup
                ListInterfaceMemberDeclaration InterfaceMemberDeclaration
                VariableDeclarators
                VariableDeclarator
                VariableDeclaratorId VariableDeclaratorIdZ
                VariableInitializer
                VariableInitializers
                Modifiers

set ScalaAllTypeDeclaration = TypeDeclarations TypeDeclaration
                            TypeParameters TypeParameterList TypeParameter TypeBound
                            ZCOITTypeDeclSpecifier ZClassOrInterfaceType ClassOrInterfaceType
                            Super
                            Interfaces
                            ClassBodyDeclarations ClassBodyDeclaration
                            InterfaceMemberDeclaration

attr ScalaAllTypeDeclaration
     syn scalaTypeDeclaration :: String

set ScalaFieldDeclaration = VariableDeclarators VariableDeclarator
                         VariableDeclaratorId VariableDeclaratorIdZ
                         VariableInitializer
                         VariableInitializers
                         Type
                         PrimitiveOrReferenceType
                         ReferenceType
                         Modifiers
                         Modifier

set ScalaFieldDeclInitialization = VariableInitializer
                                    ArgumentList
                                    TypeName
                                    ClassOrInterfaceType ZClassOrInterfaceType ZCOITTypeDeclSpecifier

-- ------------------------------------------------
-- tabs
-- ------------------------------------------------

attr ScalaAllNTab
    chn scalaNTab :: String

-- ------------------------------------------------
-- MethodDeclaration
-- ------------------------------------------------
set ScalaMethodDeclaration = Modifiers
                             Modifier
                             MethodDeclarator
                             Throws
set ScalaIsModifiers = Modifiers
                       Modifier

set ScalaResultType = ResultType
                      Type
                      PrimitiveOrReferenceType
                      ReferenceType
                      ZClassOrInterfaceType
                      ZCOITTypeDeclSpecifier

set ScalaMethodFormalParameters = FormalParameterList
                                  VariableModifiers
                                  VariableModifier

set ScalaVariableDeclaratorId = VariableDeclaratorId
                                VariableDeclaratorIdZ

set ScalaMethodBody = MethodBody
                      ConstructorBody

set ScalaStatement = Statement
                     Expression
                     BlockStatements
                     BlockStatement
                     Catches
                     CatchClause

set ScalaExpression = Expression
                      ConditionalOrExpression
                      UnaryExpression
                      PrimaryNoNewArray
                      PrimaryNNA
                      Primary

attr ScalaMethodDeclaration
     chn scalaMethodDeclaration :: String

attr ScalaIsModifiers
    syn scalaIsAbstractMethodModifier :: Bool

attr ScalaIsModifiers
    syn scalaIsNativeMethodModifier :: Bool

attr ScalaResultType
    syn scalaResultType :: String

attr ScalaMethodBody
    syn scalaMethodBody :: String

attr ScalaMethodFormalParameters
    syn scalaMethodFormalParameters :: String

attr ScalaVariableDeclaratorId
    syn scalaVariableDeclaratorId :: String

attr ScalaStatement
    chn scalaStatement :: String

attr ScalaExpression
    syn scalaExpression :: String

-- ------------------------------------------------
-- ConstructorDeclaration
-- ------------------------------------------------
set ScalaConstructorModifier = Modifiers
                               Modifier

set ScalaConstructorDeclaration = ClassBodyDeclarations
                                  ClassBodyDeclaration

attr ScalaConstructorModifier
    syn scalaConstructorModifier :: String

attr ScalaConstructorDeclaration
    syn scalaConstructorDeclarationParams :: String

attr ScalaConstructorDeclaration
    syn scalaConstructorDeclarationBody :: String


-- determina si es un metodo estatico. ToDo aplicar los mismo a field y a class para el Companion object.
{-attr ScalaMethodDeclaration
    syn isStatic :: Bool-}

-- modifiers type variableName
{
    -- Modifier isStatic isFinal
type TypeModifierIsStaticIsFinal = (String, Bool, Bool)
-- Modifiers Types Variables
type TypeFieldInitialization = Maybe String
type TypeFieldDeclaration = ([TypeModifierIsStaticIsFinal], String, String, TypeFieldInitialization)
}
attr ScalaFieldDeclaration
    chn scalaFieldDeclaration :: {[TypeFieldDeclaration]}

attr ScalaFieldDeclInitialization
    syn scalaFieldDeclInitialization :: String

-- ------------------------------------------------
-- NormalClassDeclaration
-- ------------------------------------------------

set ScalaNormalClassDeclaration = Modifiers
                                Modifier

set ScalaSuperTypeDeclaration = ClassOrInterfaceType
                              ZClassOrInterfaceType
                              ZCOITTypeDeclSpecifier

set ScalaImplementsInterfaceTypeDeclaration =  InterfaceTypeList ClassOrInterfaceType
                                            ZClassOrInterfaceType
                                            ZCOITTypeDeclSpecifier

set ScalaExtendClassBodyNormalCD = ExtendsInterfaces
                                 ClassOrInterfaceType
                                 ZClassOrInterfaceType
                                 ZCOITTypeDeclSpecifier
                                 ListInterfaceMemberDeclaration
                                 InterfaceMemberDeclaration

attr ScalaNormalClassDeclaration
    chn scalaNormalClassDeclaration :: TypeModifierIsStaticIsFinal

attr ScalaSuperTypeDeclaration
    syn scalaSuperTypeDeclaration :: String

attr ScalaImplementsInterfaceTypeDeclaration
    syn scalaImplementsInterfaceTypeDeclaration :: String

attr ScalaExtendClassBodyNormalCD
    syn scalaExtendClassBodyNormalCD :: String

-- ------------------------------------------------
-- NormalInterfaceDeclaration
-- ------------------------------------------------
set ScalaNormalInterfaceDeclaration = Modifiers
                                    Modifier

set ScalaExtendInterface = ExtendsInterfaces
                          ClassOrInterfaceType
                          ZClassOrInterfaceType
                          ZCOITTypeDeclSpecifier

set ScalaBodyNormalInterface = ListInterfaceMemberDeclaration
                                InterfaceMemberDeclaration

attr ScalaNormalInterfaceDeclaration
    chn scalaNormalInterfaceDeclaration :: TypeModifierIsStaticIsFinal

attr ScalaExtendInterface
    syn scalaExtendInterface ::  String

attr ScalaBodyNormalInterface
    syn scalaBodyNormalInterface :: String

-- -----------------------------------------------
-- sem Type declarations
-- ------------------------------------------------
{
-- modifiers of normalClassDeclaration
normalClassDeclaration :: TypeModifierIsStaticIsFinal -> String -> String
normalClassDeclaration ("", False, b2) nTab = "class" ++ " "
normalClassDeclaration ("", True, b2)  bTab = "object" ++ " "
normalClassDeclaration (str, b1, b2) nTab = if b1 then
                                            (strictFpTab str nTab) ++ " " ++ "object" ++ " "
                                       else
                                            (strictFpTab str nTab) ++ " " ++ "class" ++ " "

strictFpTab :: String -> String -> String
strictFpTab str nTab = (replace "@scala.annotation.strictfp\n" ("@scala.annotation.strictfp\n" ++ nTab) str)

constructorDeclarationParams :: String -> String -> String
constructorDeclarationParams identifier "" = identifier
constructorDeclarationParams identifier params = identifier ++ params

constructorDeclarationBody :: String -> String
constructorDeclarationBody "" = ""
constructorDeclarationBody body = body ++ "\n"

}

{
-- modifiers of normalinterfaceDeclaration
normalInterfaceDeclaration :: TypeModifierIsStaticIsFinal -> String -> String
normalInterfaceDeclaration ("", False, b2) nTab = "trait" ++ " "
normalInterfaceDeclaration ("", True, b2) nTab = "object" ++ " "
normalInterfaceDeclaration (str, b1, b2) nTab = if b1 then
                                                (strictFpTab str nTab) ++ " " ++ "object" ++ " "
                                            else
                                                (strictFpTab str nTab) ++ " " ++ "trait" ++ " "
}

sem TypeDeclarations
    | Cons lhs.scalaTypeDeclaration = @hd.scalaTypeDeclaration ++ "\n" ++ @tl.scalaTypeDeclaration
           hd.scalaNTab = @lhs.scalaNTab
           tl.scalaNTab = @hd.scalaNTab
           lhs.scalaNTab = @tl.scalaNTab
    | Nil  lhs.scalaTypeDeclaration = ""
           lhs.scalaNTab = @lhs.scalaNTab

sem TypeDeclaration
    | TypeDeclarationClassDeclarationNormalCD
                              modifiers.scalaFieldDeclaration = []  -- ToDo
                              modifiers.scalaNormalClassDeclaration = ("", False, False)
                              modifiers.scalaNormalInterfaceDeclaration = ("", False, False)
                              modifiers.scalaMethodDeclaration = "" -- ToDo
                              classBodyDeclarations.scalaNTab = @lhs.scalaNTab ++ "\t"
                              lhs.scalaNTab = @lhs.scalaNTab

                              lhs.scalaTypeDeclaration =
                                  @lhs.scalaNTab ++
                                  (normalClassDeclaration @modifiers.scalaNormalClassDeclaration @lhs.scalaNTab) ++
                                  (constructorDeclarationParams @identifier @classBodyDeclarations.scalaConstructorDeclarationParams) ++
                                  @typeParameters.scalaTypeDeclaration ++ -- ToDo
                                  @super.scalaTypeDeclaration ++
                                  @interfaces.scalaTypeDeclaration ++
                                  " { \n" ++
                                  (constructorDeclarationBody @classBodyDeclarations.scalaConstructorDeclarationBody) ++
                                  @classBodyDeclarations.scalaTypeDeclaration ++ @lhs.scalaNTab ++
                                  "\n}\n\n"

    | TypeDeclarationClassDeclarationEnumD
                                modifiers.scalaFieldDeclaration = []
                                lhs.scalaTypeDeclaration = "" -- ToDO modifiers :: Modifiers
                                modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
                                modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
                                modifiers.scalaMethodDeclaration = "" -- ToDo

                                enumBody.scalaNTab = @lhs.scalaNTab ++ "\t"
                                lhs.scalaNTab = @lhs.scalaNTab

    | TypeDeclarationInterfaceDeclarationNormalInterfaceD
                                modifiers.scalaFieldDeclaration = []

                                modifiers.scalaNormalClassDeclaration = ("", False, False)
                                modifiers.scalaNormalInterfaceDeclaration = ("", False, False)
                                modifiers.scalaMethodDeclaration = "" -- ToDo
                                listInterfaceMemberDeclarations.scalaNTab = @lhs.scalaNTab ++ "\t"
                                lhs.scalaNTab = @lhs.scalaNTab

                                lhs.scalaTypeDeclaration =
                                    @lhs.scalaNTab ++
                                    (normalInterfaceDeclaration @modifiers.scalaNormalInterfaceDeclaration @lhs.scalaNTab) ++
                                    @identifier ++
                                    @typeParameters.scalaTypeDeclaration ++ --ToDo
                                    @extendsInterfaces.scalaExtendInterface ++
                                    " {\n" ++ @listInterfaceMemberDeclarations.scalaBodyNormalInterface ++ @lhs.scalaNTab ++
                                    "\n}\n\n"

    | TypeDeclarationInterfaceDeclarationAnnotationTypeD
                                modifiers.scalaFieldDeclaration = []
                                lhs.scalaTypeDeclaration = "" -- ToDO  modifiers :: Modifiers

                                modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
                                listAnnotationTypeElementDeclaration.scalaNTab = @lhs.scalaNTab
                                lhs.scalaNTab = @lhs.scalaNTab

                                modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
                                modifiers.scalaMethodDeclaration = "" -- ToDo
    | TypeDeclarationSemiColon  lhs.scalaTypeDeclaration = "" -- ToDO review how to convert this case to Scala
                                lhs.scalaNTab = @lhs.scalaNTab

sem ExtendsInterfaces
    | ExtendsInterfaceType
                lhs.scalaExtendInterface =  @classOrInterfacesType.scalaExtendInterface ++ @extendsInterfaces.scalaExtendInterface
                lhs.scalaExtendClassBodyNormalCD = @classOrInterfacesType.scalaExtendInterface ++ @extendsInterfaces.scalaExtendClassBodyNormalCD
    | NilExtendsInterfaces
                lhs.scalaExtendInterface = ""
                lhs.scalaExtendClassBodyNormalCD = ""

{
concatenateModifiers :: [TypeFieldDeclaration] -> TypeFieldDeclaration -> [TypeFieldDeclaration]
concatenateModifiers [] tpl = tpl:[]
concatenateModifiers ((f,s,t,ti):[]) (ftpl, stpl, ttpl, titpl) = ((ftpl ++ f), s, t, ti):[]

changeOrderVolatileTransient :: [TypeFieldDeclaration] -> [TypeFieldDeclaration]
changeOrderVolatileTransient modifiers = map (\tdf -> partition' tdf) modifiers
    where
        partition' (ms, t, v, ti) =  ((joinTuple (partition (\(m, _, _) -> (m == "@volatile" || m == "@transient")) ms)), t, v, ti)
        joinTuple (fst, snd) = fst ++ snd

}

{
-- modifiers functions for normalClassDeclaration.
strictFpModifier :: TypeModifierIsStaticIsFinal -> TypeModifierIsStaticIsFinal
strictFpModifier (str, b1, b2) = if T.isInfixOf (T.pack("strfp")) (T.pack(str))
                                        then ("@scala.annotation.strictfp\n" ++ T.unpack(T.strip(T.pack(replace "strfp" "" str))), b1, b2)
                                        else (T.unpack(T.strip(T.pack(str))), b1, b2)

joinTypeModifier :: TypeModifierIsStaticIsFinal -> TypeModifierIsStaticIsFinal -> TypeModifierIsStaticIsFinal
joinTypeModifier ("", b1, b11) (str2, b2, b22) = (T.unpack(T.strip(T.pack(str2))), b1 || b2, b11 || b22)
joinTypeModifier (str1, b1, b11) ("", b2, b22) = (T.unpack(T.strip(T.pack(str1))), b1 || b2, b11 || b22)
joinTypeModifier (str1, b1, b11) (str2, b2, b22) = (T.unpack(T.strip(T.pack(str1))) ++  " " ++ T.unpack(T.strip(T.pack(str2))), b1 || b2, b11 || b22)

strictFpMethodModifier :: String -> String -> String
strictFpMethodModifier str nTab = if T.isInfixOf (T.pack("strfp ")) (T.pack(str))
                       then "@scala.annotation.strictfp\n" ++ nTab ++ (replace "strfp " "" str)
                       else str

nativeMethodModifier :: String -> String -> String
nativeMethodModifier str nTab = if T.isInfixOf (T.pack("ntve ")) (T.pack(str))
                       then "@native\n" ++ nTab ++ (replace "ntve " "" str)
                       else str
}

sem Modifiers
    | Modifiers
                    modifier.scalaFieldDeclaration = @lhs.scalaFieldDeclaration
                    modifiers.scalaFieldDeclaration = @modifier.scalaFieldDeclaration
                    lhs.scalaFieldDeclaration = changeOrderVolatileTransient @modifiers.scalaFieldDeclaration   -- ToDO check static final, etc

                    modifier.scalaNormalClassDeclaration = @lhs.scalaNormalClassDeclaration
                    modifiers.scalaNormalClassDeclaration = @modifier.scalaNormalClassDeclaration
                    lhs.scalaNormalClassDeclaration = strictFpModifier @modifiers.scalaNormalClassDeclaration

                    modifier.scalaNormalInterfaceDeclaration = @lhs.scalaNormalInterfaceDeclaration
                    modifiers.scalaNormalInterfaceDeclaration = @modifier.scalaNormalInterfaceDeclaration
                    lhs.scalaNormalInterfaceDeclaration = strictFpModifier @modifiers.scalaNormalInterfaceDeclaration

                    modifier.scalaMethodDeclaration = @lhs.scalaMethodDeclaration
                    --modifiers.scalaMethodDeclaration = @modifier.scalaMethodDeclaration
                    lhs.scalaMethodDeclaration = strictFpMethodModifier(nativeMethodModifier @modifiers.scalaMethodDeclaration @lhs.scalaNTab) @lhs.scalaNTab

                    lhs.scalaConstructorModifier = @modifier.scalaConstructorModifier ++ @modifiers.scalaConstructorModifier
                    lhs.scalaIsAbstractMethodModifier = @modifier.scalaIsAbstractMethodModifier || @modifiers.scalaIsAbstractMethodModifier

                    lhs.scalaIsNativeMethodModifier = @modifier.scalaIsNativeMethodModifier || @modifiers.scalaIsNativeMethodModifier

    | NilModifiers  lhs.scalaFieldDeclaration = changeOrderVolatileTransient @lhs.scalaFieldDeclaration
                    lhs.scalaNormalClassDeclaration = @lhs.scalaNormalClassDeclaration
                    lhs.scalaNormalInterfaceDeclaration = @lhs.scalaNormalInterfaceDeclaration
                    lhs.scalaMethodDeclaration = @lhs.scalaMethodDeclaration
                    lhs.scalaConstructorModifier = ""
                    lhs.scalaIsAbstractMethodModifier = False
                    lhs.scalaIsNativeMethodModifier = False

sem Modifier
    | ModifierAnnotation lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", False, False)], "", "", Nothing): @lhs.scalaFieldDeclaration)} -- ToDO annotation :: Annotation
                         lhs.scalaNormalClassDeclaration = @lhs.scalaNormalClassDeclaration -- ToDO annotation :: Annotation
                         lhs.scalaNormalInterfaceDeclaration =  @lhs.scalaNormalInterfaceDeclaration -- ToDo
                         lhs.scalaMethodDeclaration = @lhs.scalaMethodDeclaration -- ToDo
                         lhs.scalaConstructorModifier = "" -- ToDo
                         lhs.scalaIsAbstractMethodModifier = False
                         lhs.scalaIsNativeMethodModifier = False

    | ModifierPublic lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", False, False)], "", "", Nothing): @lhs.scalaFieldDeclaration)}
                     lhs.scalaNormalClassDeclaration = joinTypeModifier @lhs.scalaNormalClassDeclaration ("", False, False)
                     lhs.scalaNormalInterfaceDeclaration = joinTypeModifier @lhs.scalaNormalInterfaceDeclaration ("", False, False)
                     lhs.scalaMethodDeclaration = @lhs.scalaMethodDeclaration
                     lhs.scalaConstructorModifier = ""
                     lhs.scalaIsAbstractMethodModifier = False
                     lhs.scalaIsNativeMethodModifier = False

    | ModifierProtected lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("protected", False, False)], "", "", Nothing): @lhs.scalaFieldDeclaration)}
                        lhs.scalaNormalClassDeclaration = joinTypeModifier  @lhs.scalaNormalClassDeclaration  ("protected", False, False)
                        lhs.scalaNormalInterfaceDeclaration = joinTypeModifier @lhs.scalaNormalInterfaceDeclaration ("protected", False, False)
                        lhs.scalaMethodDeclaration = "protected" ++ " " ++ @lhs.scalaMethodDeclaration
                        lhs.scalaConstructorModifier = "protected"
                        lhs.scalaIsAbstractMethodModifier = False
                        lhs.scalaIsNativeMethodModifier = False

    | ModifierPrivate lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("private", False, False)], "", "", Nothing): @lhs.scalaFieldDeclaration)}
                      lhs.scalaNormalClassDeclaration = joinTypeModifier  @lhs.scalaNormalClassDeclaration ("private", False, False)
                      lhs.scalaNormalInterfaceDeclaration = joinTypeModifier @lhs.scalaNormalInterfaceDeclaration ("private", False, False)
                      lhs.scalaMethodDeclaration = "private" ++ " " ++ @lhs.scalaMethodDeclaration
                      lhs.scalaConstructorModifier = "private"
                      lhs.scalaIsAbstractMethodModifier = False
                      lhs.scalaIsNativeMethodModifier = False

    | ModifierAbstract lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", False, False)], "", "", Nothing): @lhs.scalaFieldDeclaration)} -- ToDO
                       lhs.scalaNormalClassDeclaration = joinTypeModifier  @lhs.scalaNormalClassDeclaration ("abstract", False, False)
                       lhs.scalaNormalInterfaceDeclaration = joinTypeModifier @lhs.scalaNormalInterfaceDeclaration ("abstract", False, False)
                       lhs.scalaMethodDeclaration = @lhs.scalaMethodDeclaration
                       lhs.scalaConstructorModifier = ""
                       lhs.scalaIsAbstractMethodModifier = True
                       lhs.scalaIsNativeMethodModifier = False

    | ModifiersStatic lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", True, False)], "", "", Nothing): @lhs.scalaFieldDeclaration)} -- ToDo
                      lhs.scalaNormalClassDeclaration = joinTypeModifier  @lhs.scalaNormalClassDeclaration ("", True, False)
                      lhs.scalaNormalInterfaceDeclaration = joinTypeModifier @lhs.scalaNormalInterfaceDeclaration ("", True, False)
                      lhs.scalaMethodDeclaration = @lhs.scalaMethodDeclaration -- ToDo aplicar isStatic
                      lhs.scalaConstructorModifier = ""
                      lhs.scalaIsAbstractMethodModifier = False
                      lhs.scalaIsNativeMethodModifier = False

    | ModifierFinal lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", False, True)], "", "", Nothing): @lhs.scalaFieldDeclaration)} -- ToDO
                    lhs.scalaNormalClassDeclaration = joinTypeModifier  @lhs.scalaNormalClassDeclaration ("final", False, True)
                    lhs.scalaNormalInterfaceDeclaration = joinTypeModifier @lhs.scalaNormalInterfaceDeclaration ("", False, True)
                    lhs.scalaMethodDeclaration = "final" ++ " " ++ @lhs.scalaMethodDeclaration
                    lhs.scalaConstructorModifier = ""
                    lhs.scalaIsAbstractMethodModifier = False
                    lhs.scalaIsNativeMethodModifier = False

    | ModifierStrictfp lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", False, False)], "", "", Nothing): @lhs.scalaFieldDeclaration)} -- ToDO
                        lhs.scalaNormalClassDeclaration = joinTypeModifier  @lhs.scalaNormalClassDeclaration ("strfp", False, False)
                        lhs.scalaNormalInterfaceDeclaration = joinTypeModifier @lhs.scalaNormalInterfaceDeclaration ("strfp", False, False)
                        lhs.scalaMethodDeclaration = "strfp " ++ @lhs.scalaMethodDeclaration
                        lhs.scalaConstructorModifier = ""
                        lhs.scalaIsAbstractMethodModifier = False
                        lhs.scalaIsNativeMethodModifier = False

    | FieldModifierTransient lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("@transient", False, False)], "", "", Nothing): @lhs.scalaFieldDeclaration)} -- ToDO
                             lhs.scalaNormalClassDeclaration = @lhs.scalaNormalClassDeclaration
                             lhs.scalaNormalInterfaceDeclaration = @lhs.scalaNormalInterfaceDeclaration
                             lhs.scalaMethodDeclaration = @lhs.scalaMethodDeclaration
                             lhs.scalaConstructorModifier = ""
                             lhs.scalaIsAbstractMethodModifier = False
                             lhs.scalaIsNativeMethodModifier = False

    | FieldModifierVolatile lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("@volatile", False, False)], "", "", Nothing): @lhs.scalaFieldDeclaration)} -- ToDO
                            lhs.scalaNormalClassDeclaration = @lhs.scalaNormalClassDeclaration
                            lhs.scalaNormalInterfaceDeclaration = @lhs.scalaNormalInterfaceDeclaration
                            lhs.scalaMethodDeclaration = @lhs.scalaMethodDeclaration
                            lhs.scalaConstructorModifier = ""
                            lhs.scalaIsAbstractMethodModifier = False
                            lhs.scalaIsNativeMethodModifier = False

    | MethodModifierSynchronized lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", False, False)], "", "", Nothing): @lhs.scalaFieldDeclaration)} -- ToDO
                                 lhs.scalaNormalClassDeclaration = @lhs.scalaNormalClassDeclaration
                                 lhs.scalaNormalInterfaceDeclaration = @lhs.scalaNormalInterfaceDeclaration
                                 lhs.scalaMethodDeclaration = @lhs.scalaMethodDeclaration -- ToDo aplicar isSynchronized
                                 lhs.scalaConstructorModifier = ""
                                 lhs.scalaIsAbstractMethodModifier = False
                                 lhs.scalaIsNativeMethodModifier = False

    | MethodModifierNative lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", False, False)], "", "", Nothing): @lhs.scalaFieldDeclaration)} -- ToDO
                           lhs.scalaNormalClassDeclaration = @lhs.scalaNormalClassDeclaration
                           lhs.scalaNormalInterfaceDeclaration = @lhs.scalaNormalInterfaceDeclaration
                           lhs.scalaMethodDeclaration = "ntve " ++ @lhs.scalaMethodDeclaration
                           lhs.scalaConstructorModifier = ""
                           lhs.scalaIsAbstractMethodModifier = False
                           lhs.scalaIsNativeMethodModifier = True

sem TypeParameters
    | TypeParametersC1
            lhs.scalaTypeDeclaration = "[" ++ @typeParameterList.scalaTypeDeclaration ++ "]" -- ToDO check >>>
    | TypeParametersC2
            lhs.scalaTypeDeclaration = "[" ++ @typeParameterList.scalaTypeDeclaration ++ "]" -- ToDO check >>
    | TypeParametersC3
            lhs.scalaTypeDeclaration = "[" ++ @typeParameterList.scalaTypeDeclaration ++ "]" -- ToDO check >
    | TypeParametersC0
            lhs.scalaTypeDeclaration = "[" ++ @typeParameterList.scalaTypeDeclaration ++ "]" -- ToDO
    | NilTypeParameters
            lhs.scalaTypeDeclaration = ""

{
commaTypeParameters :: String -> String -> String
commaTypeParameters hd "" = hd
commaTypeParameters hd tl = hd ++ ", " ++ tl

pointStr :: String -> String -> String
pointStr hd "" = hd
pointStr hd tl = hd ++ "." ++ tl
}

sem TypeParameterList
    | Cons lhs.scalaTypeDeclaration = commaTypeParameters @hd.scalaTypeDeclaration @tl.scalaTypeDeclaration
    | Nil lhs.scalaTypeDeclaration = ""

sem TypeParameter
    | TypeParameterBound lhs.scalaTypeDeclaration = @identifier ++ @typeBound.scalaTypeDeclaration
    | TypeParameter lhs.scalaTypeDeclaration = @identifier

{
typeBoundInterface :: String -> String
typeBoundInterface str = replace "<:" "with" str
}

sem TypeBound
    | TypeBound lhs.scalaTypeDeclaration =  " <: " ++ @classOrInterfaceType.scalaTypeDeclaration ++ (typeBoundInterface @typeBound.scalaTypeDeclaration)
    | NilAdditionalBoundList lhs.scalaTypeDeclaration = ""

sem ClassOrInterfaceType
    | ClassOrInterfaceType lhs.scalaTypeDeclaration =  @identifier ++ @zClassOrInterfaceType.scalaTypeDeclaration -- used in typeArguments of normal class ToDo @typeArguments.scalaTypeDeclaration ++
                           lhs.scalaSuperTypeDeclaration = " extends " ++ @identifier ++ @zClassOrInterfaceType.scalaSuperTypeDeclaration -- used in Super
                           lhs.scalaImplementsInterfaceTypeDeclaration = @identifier ++ @zClassOrInterfaceType.scalaImplementsInterfaceTypeDeclaration
                           lhs.scalaExtendInterface = " extends " ++ @identifier ++ @zClassOrInterfaceType.scalaExtendInterface
                           lhs.scalaExtendClassBodyNormalCD = " extends " ++ @identifier ++ @zClassOrInterfaceType.scalaExtendClassBodyNormalCD
                           lhs.scalaFieldDeclInitialization = @identifier ++ @zClassOrInterfaceType.scalaFieldDeclInitialization

sem ListInterfaceMemberDeclaration
    | Cons lhs.scalaExtendClassBodyNormalCD = @hd.scalaExtendClassBodyNormalCD ++ @tl.scalaExtendClassBodyNormalCD
           lhs.scalaBodyNormalInterface = @hd.scalaBodyNormalInterface ++ @tl.scalaBodyNormalInterface
           hd.scalaNTab = @lhs.scalaNTab
           tl.scalaNTab = @hd.scalaNTab
           lhs.scalaNTab = @tl.scalaNTab
    | Nil lhs.scalaExtendClassBodyNormalCD = ""
          lhs.scalaBodyNormalInterface = ""
          lhs.scalaNTab = @lhs.scalaNTab


sem ZClassOrInterfaceType
    | Cons lhs.scalaTypeDeclaration = @hd.scalaTypeDeclaration ++ @tl.scalaTypeDeclaration
           lhs.scalaSuperTypeDeclaration = "." ++ @hd.scalaSuperTypeDeclaration ++ @tl.scalaSuperTypeDeclaration
           lhs.scalaImplementsInterfaceTypeDeclaration = "." ++ @hd.scalaImplementsInterfaceTypeDeclaration ++ @tl.scalaImplementsInterfaceTypeDeclaration
           lhs.scalaExtendInterface =  "." ++ @hd.scalaExtendInterface ++ @tl.scalaExtendInterface
           lhs.scalaExtendClassBodyNormalCD = "." ++ @hd.scalaExtendClassBodyNormalCD ++ @tl.scalaExtendClassBodyNormalCD
           lhs.scalaFieldDeclInitialization = "." ++ @hd.scalaExtendInterface ++ @tl.scalaExtendInterface
           lhs.scalaResultType = "." ++ @hd.scalaResultType ++ @tl.scalaResultType

    | Nil lhs.scalaTypeDeclaration = ""
          lhs.scalaSuperTypeDeclaration = ""
          lhs.scalaImplementsInterfaceTypeDeclaration = ""
          lhs.scalaExtendInterface = ""
          lhs.scalaExtendClassBodyNormalCD = ""
          lhs.scalaFieldDeclInitialization = ""
          lhs.scalaResultType = ""

sem ZCOITTypeDeclSpecifier
    | ZCOITTypeDeclSpecifier lhs.scalaTypeDeclaration = @identifier -- ToDo ++ @typeArguments.scalaTypeDeclaration
                             lhs.scalaSuperTypeDeclaration = @identifier -- ToDo ++ @typeArguments.scalaTypeDeclaration
                             lhs.scalaImplementsInterfaceTypeDeclaration = @identifier
                             lhs.scalaExtendInterface = @identifier
                             lhs.scalaExtendClassBodyNormalCD = @identifier
                             lhs.scalaFieldDeclInitialization = @identifier
                             lhs.scalaResultType = @identifier

sem Super
    | Super lhs.scalaTypeDeclaration = @classOrInterfaceType.scalaSuperTypeDeclaration
    | NilSuper lhs.scalaTypeDeclaration = ""

sem Interfaces
    | Interfaces lhs.scalaTypeDeclaration = @interfaceTypeList.scalaImplementsInterfaceTypeDeclaration   -- ToDO interfaceTypeList :: InterfaceTypeList
    | NilInterfaces lhs.scalaTypeDeclaration = ""

sem InterfaceTypeList
    | Cons lhs.scalaImplementsInterfaceTypeDeclaration = " with " ++ @hd.scalaImplementsInterfaceTypeDeclaration ++ @tl.scalaImplementsInterfaceTypeDeclaration
    | Nil lhs.scalaImplementsInterfaceTypeDeclaration = ""

sem ClassBodyDeclarations
    | Cons
            --hd.scalaFieldDeclaration = []
            lhs.scalaTypeDeclaration = @hd.scalaTypeDeclaration ++ @tl.scalaTypeDeclaration
            hd.scalaNTab = @lhs.scalaNTab
            tl.scalaNTab = @hd.scalaNTab
            lhs.scalaNTab = @tl.scalaNTab

            lhs.scalaConstructorDeclarationParams = @hd.scalaConstructorDeclarationParams ++ @tl.scalaConstructorDeclarationParams
            lhs.scalaConstructorDeclarationBody = @hd.scalaConstructorDeclarationBody ++ @tl.scalaConstructorDeclarationBody

    | Nil
            lhs.scalaTypeDeclaration = ""
            lhs.scalaNTab = @lhs.scalaNTab
            lhs.scalaConstructorDeclarationParams = ""
            lhs.scalaConstructorDeclarationBody = ""


sem ReferenceTypeList
    | Cons  hd.scalaFieldDeclaration = []

{
checkVariableDeclarators :: [TypeFieldDeclaration] -> String -> String
checkVariableDeclarators [] _ = ""
checkVariableDeclarators ((modifiers, type_, variable, typeInitialization):xs)  nTab
            | elemStaticFinal modifiers = "\n" ++ nTab ++ (takeModifiers modifiers) ++ "val "  ++ variable ++
                ": " ++ (checkTypeInitialization typeInitialization type_) ++  (checkVariableDeclarators xs nTab)
            | elemStatic modifiers = "\n" ++ nTab ++ (takeModifiers modifiers) ++  "var "  ++ variable ++
                ": " ++ (checkTypeInitialization typeInitialization type_) ++  (checkVariableDeclarators xs nTab)
            | elemFinal modifiers = "\n" ++ nTab ++(takeModifiers modifiers) ++ "val "  ++ variable ++
                ": " ++ (checkTypeInitialization typeInitialization type_) ++  (checkVariableDeclarators xs nTab)
            | otherwise  = "\n" ++ nTab ++ (takeModifiers modifiers) ++ "var "  ++ variable ++
                ": " ++ (checkTypeInitialization typeInitialization type_) ++  (checkVariableDeclarators xs nTab)

checkTypeInitialization :: TypeFieldInitialization -> String -> String
checkTypeInitialization Nothing type_ = defaultValueType type_
checkTypeInitialization (Just initialization) type_ = type_ ++ " = " ++ initialization

elemStatic :: [TypeModifierIsStaticIsFinal] -> Bool
elemStatic [] = False
elemStatic ((_, True, _):modifiers) = True  || elemStatic modifiers
elemStatic (m:modifiers)            = False || elemStatic modifiers

elemFinal :: [TypeModifierIsStaticIsFinal] -> Bool
elemFinal [] = False
elemFinal ((_, _, True):modifiers) = True  || elemFinal modifiers
elemFinal (m:modifiers)            = False || elemFinal modifiers

elemStaticFinal :: [TypeModifierIsStaticIsFinal] -> Bool
elemStaticFinal modifiers = (elemStatic modifiers) && (elemFinal modifiers)

takeModifiers :: [TypeModifierIsStaticIsFinal] -> String
takeModifiers modifiers = foldl takeModifiers' "" modifiers
    where
        takeModifiers' s (fs, t1, t2) = if (fs == "") then s else s ++ fs ++ " "

defaultValueType :: String -> String
defaultValueType type_
            | type_ == "Byte"    = type_ ++ " = 0"
            | type_ == "Short"   = type_ ++ " = 0"
            | type_ == "Int"     = type_ ++ " = 0"
            | type_ == "Long"    = type_ ++ " = 0L"
            | type_ == "Float"   = type_ ++ " = 0"
            | type_ == "Double"  = type_ ++ " = 0.0"
            | type_ == "Char"    = type_ ++ " = \'\\u0000\'"
            | type_ == "Boolean" = type_ ++ " = false"
            | otherwise          = type_ ++ " = null"

deletePrivateModifier :: String -> String
deletePrivateModifier modifiers = replace "private "  "" modifiers

}

sem ClassBodyDeclaration
    | ClassBodyDeclClassMemberDeclFieldDeclaration
                        modifiers.scalaFieldDeclaration = ([("", False, False)], "", "", Nothing) : [] -- ToDo
                        type_.scalaFieldDeclaration = @modifiers.scalaFieldDeclaration
                        variableDeclarators.scalaFieldDeclaration = @type_.scalaFieldDeclaration

                        lhs.scalaTypeDeclaration = {checkVariableDeclarators @variableDeclarators.scalaFieldDeclaration @variableDeclarators.scalaNTab}
                        variableDeclarators.scalaNTab = @lhs.scalaNTab
                        lhs.scalaNTab = @lhs.scalaNTab

                        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
                        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
                        modifiers.scalaMethodDeclaration = "" -- ToDo

                        lhs.scalaConstructorDeclarationParams = ""
                        lhs.scalaConstructorDeclarationBody = ""
    | ClassBodyDeclClassMemberDeclMethodDeclaration
                        modifiers.scalaFieldDeclaration = ([("", False, False)], "", "", Nothing) : [] -- ToDo
                        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
                        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
                        modifiers.scalaMethodDeclaration = "" -- ToDo

                        methodBody.scalaNTab = @lhs.scalaNTab ++ "\t"
                        lhs.scalaNTab = @lhs.scalaNTab

                        lhs.scalaTypeDeclaration = {
                            if (@modifiers.scalaIsAbstractMethodModifier) then
                                "\n" ++ @lhs.scalaNTab ++
                                @modifiers.scalaMethodDeclaration ++
                                @typeParameters.scalaTypeDeclaration ++ -- ToDo
                                "def " ++ @methosDeclarator.scalaMethodDeclaration ++
                                ": " ++ @resultType.scalaResultType
                            else if (@modifiers.scalaIsNativeMethodModifier) then
                                "\n" ++ @lhs.scalaNTab ++
                                deletePrivateModifier (@modifiers.scalaMethodDeclaration) ++
                                @typeParameters.scalaTypeDeclaration ++ -- ToDo
                                "def " ++ @methosDeclarator.scalaMethodDeclaration ++
                                ": " ++ @resultType.scalaResultType
                            else
                                "\n" ++ @lhs.scalaNTab ++
                                @modifiers.scalaMethodDeclaration ++
                                @typeParameters.scalaTypeDeclaration ++ -- ToDo
                                "def " ++ @methosDeclarator.scalaMethodDeclaration ++
                                ": " ++ @resultType.scalaResultType ++
                                " = {" ++
                                @methodBody.scalaMethodBody ++
                                "\n" ++ @lhs.scalaNTab ++ "}" -- ToDo throws
                        }

                        lhs.scalaConstructorDeclarationParams = ""
                        lhs.scalaConstructorDeclarationBody = ""

    | ClassBodyDeclClassMemberDeclClassDeclarationNormalCD
                        -- lhs.scalaFieldDeclaration = []  -- ToDO              modifiers :: Modifiers

                        modifiers.scalaFieldDeclaration = ([("", False, False)], "", "", Nothing) : [] -- ToDo
                        modifiers.scalaNormalClassDeclaration = ("", False, False)
                        modifiers.scalaNormalInterfaceDeclaration = ("", False, False)
                        modifiers.scalaMethodDeclaration = "" -- ToDo
                        lhs.scalaNTab = @lhs.scalaNTab
                        classBodyDeclarations.scalaNTab = @lhs.scalaNTab ++ "\t"

                        lhs.scalaTypeDeclaration =
                            "\n" ++
                            @lhs.scalaNTab ++
                            (normalClassDeclaration @modifiers.scalaNormalClassDeclaration @lhs.scalaNTab) ++
                            (constructorDeclarationParams @identifier @classBodyDeclarations.scalaConstructorDeclarationParams) ++
                            @typeParameters.scalaTypeDeclaration ++ -- ToDo
                            @super.scalaTypeDeclaration ++
                            @interfaces.scalaTypeDeclaration ++
                            " {\n" ++
                            (constructorDeclarationBody @classBodyDeclarations.scalaConstructorDeclarationBody) ++
                            @classBodyDeclarations.scalaTypeDeclaration ++
                            "\n" ++ @lhs.scalaNTab ++ "}\n\n"

                        lhs.scalaConstructorDeclarationParams = ""
                        lhs.scalaConstructorDeclarationBody = ""

    | ClassBodyDeclClassMemberDeclClassDeclarationEnumD
                        --lhs.scalaFieldDeclaration = [] -- ToDO                 modifiers :: Modifiers
                        lhs.scalaTypeDeclaration = ""
                        modifiers.scalaFieldDeclaration = ([("", False, False)], "", "", Nothing) : [] -- ToDo

                        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
                        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
                        modifiers.scalaMethodDeclaration = "" -- ToDo

                        enumBody.scalaNTab = @lhs.scalaNTab ++ "\t" -- ToDo, check
                        lhs.scalaNTab = @lhs.scalaNTab

                        lhs.scalaConstructorDeclarationParams = ""
                        lhs.scalaConstructorDeclarationBody = ""

    | ClassBodyDeclClassMemberDeclInterfaceDeclarationNormalInterfaceD
                        --lhs.scalaFieldDeclaration = [] -- ToDO modifiers :: Modifiers
                        modifiers.scalaFieldDeclaration = [] -- ToDo ?

                        modifiers.scalaNormalClassDeclaration = ("", False, False)
                        modifiers.scalaNormalInterfaceDeclaration = ("", False, False)
                        modifiers.scalaMethodDeclaration = "" -- ToDo
                        lhs.scalaNTab = @lhs.scalaNTab
                        listInterfaceMemberDeclaration.scalaNTab = @lhs.scalaNTab ++ "\t"

                        lhs.scalaTypeDeclaration =
                            "\n" ++
                            @lhs.scalaNTab ++
                            (normalInterfaceDeclaration @modifiers.scalaNormalInterfaceDeclaration @lhs.scalaNTab) ++
                            @identifier ++
                            @typeParameters.scalaTypeDeclaration ++ --ToDo
                            @extendsInterfaces.scalaExtendInterface ++
                            " {\n" ++ @listInterfaceMemberDeclaration.scalaBodyNormalInterface ++
                            "\n" ++ @lhs.scalaNTab ++ "}\n\n"

                        lhs.scalaConstructorDeclarationParams = ""
                        lhs.scalaConstructorDeclarationBody = ""

    | ClassBodyDeclClassMemberDeclInterfaceDeclarationAnnotationTypeD
                        --lhs.scalaFieldDeclaration = [] -- ToDO modifiers :: Modifiers
                        modifiers.scalaFieldDeclaration = ([("", False, False)], "", "", Nothing) : [] -- ToDo
                        lhs.scalaTypeDeclaration = ""

                        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
                        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
                        modifiers.scalaMethodDeclaration = "" -- ToDo

                        listAnnotationTypeElementDeclaration.scalaNTab = @lhs.scalaNTab
                        lhs.scalaNTab = @lhs.scalaNTab

                        lhs.scalaConstructorDeclarationParams = ""
                        lhs.scalaConstructorDeclarationBody = ""

    | ClassBodyDeclClassMemberDeclSemiColon
                        -- lhs.scalaFieldDeclaration = [] -- ToDO
                        lhs.scalaTypeDeclaration = ""
                        lhs.scalaNTab = @lhs.scalaNTab

                        lhs.scalaConstructorDeclarationParams = ""
                        lhs.scalaConstructorDeclarationBody = ""

    | ClassBodyInstanceInitializer
                        -- lhs.scalaFieldDeclaration = [] -- ToDO  blockStatements :: BlockStatements {- Block -- InstanceInitializer -}
                        lhs.scalaTypeDeclaration = ""
                        blockStatements.scalaNTab = @lhs.scalaNTab
                        blockStatements.scalaStatement = ""
                        lhs.scalaNTab = @lhs.scalaNTab

                        lhs.scalaConstructorDeclarationParams = ""
                        lhs.scalaConstructorDeclarationBody = ""

    | ClassBodyStaticInitializer
                        -- lhs.scalaFieldDeclaration = [] -- ToDO  blockStatements :: BlockStatements {- StaticInitializer -}
                        lhs.scalaTypeDeclaration = ""
                        blockStatements.scalaNTab = @lhs.scalaNTab
                        blockStatements.scalaStatement = ""
                        lhs.scalaNTab = @lhs.scalaNTab

                        lhs.scalaConstructorDeclarationParams = ""
                        lhs.scalaConstructorDeclarationBody = ""

    | ClassBodyConstructorDeclaration
                        --lhs.scalaFieldDeclaration = [] -- ToDO  modifiers :: Modifiers
                        modifiers.scalaFieldDeclaration = ([("", False, False)], "", "", Nothing) : [] -- ToDo

                        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
                        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
                        modifiers.scalaMethodDeclaration = "" -- ToDo
                        constructorBody.scalaNTab = @lhs.scalaNTab ++ "\t" -- ToDo, check if is correct
                        lhs.scalaNTab = @lhs.scalaNTab

                        lhs.scalaTypeDeclaration = ""

                        lhs.scalaConstructorDeclarationParams = "(" ++  @formalParameterList.scalaMethodFormalParameters ++ ")"
                        lhs.scalaConstructorDeclarationBody = {
                            if (@constructorBody.scalaMethodBody == "") then ""
                            else "\n" ++ @lhs.scalaNTab ++ " {" ++
                                 @constructorBody.scalaMethodBody ++
                                 "\n" ++ @lhs.scalaNTab ++ "}" -- ToDo throws
                        }

    | ClassBodyConstructorDeclarationNoFormalParList
                        --lhs.scalaFieldDeclaration = [] -- ToDO  modifiers :: Modifiers
                        modifiers.scalaFieldDeclaration = ([("", False, False)], "", "", Nothing) : [] -- ToDo
                        lhs.scalaTypeDeclaration = ""

                        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
                        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
                        modifiers.scalaMethodDeclaration = "" -- ToDo
                        constructorBody.scalaNTab = @lhs.scalaNTab ++ "\t" -- ToDo , check if is correct.
                        lhs.scalaNTab = @lhs.scalaNTab

                        lhs.scalaConstructorDeclarationParams = ""
                        lhs.scalaConstructorDeclarationBody = ""

sem Type  -- ToDo check
    | TypePrimitiveType lhs.scalaFieldDeclaration = @primitiveOrReferenceType.scalaFieldDeclaration
                        lhs.scalaResultType = @primitiveOrReferenceType.scalaResultType

{
addTypeToModifiers :: String -> TypeFieldDeclaration -> TypeFieldDeclaration
addTypeToModifiers type_ (modifiers, t, variableDeclarators, ti)  = (modifiers, type_, variableDeclarators, ti)
}

sem PrimitiveOrReferenceType
    | TypePrimitiveNumericType_TypeIntegral_Byte
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Byte") @lhs.scalaFieldDeclaration
                                lhs.scalaResultType = "Byte"

    | TypePrimitiveNumericType_TypeIntegral_Short
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Short") @lhs.scalaFieldDeclaration -- ToDo
                                lhs.scalaResultType = "Short"

    | TypePrimitiveNumericType_TypeIntegral_Int
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Int") @lhs.scalaFieldDeclaration -- ToDo
                                lhs.scalaResultType = "Int"

    | TypePrimitiveNumericType_TypeIntegral_Long
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Long") @lhs.scalaFieldDeclaration -- ToDo
                                lhs.scalaResultType = "Long"

    | TypePrimitiveNumericType_TypeIntegral_Char
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Char") @lhs.scalaFieldDeclaration -- ToDo
                                lhs.scalaResultType = "Char"

    | TypePrimitiveNumericType_TypeFloating_Float
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Float") @lhs.scalaFieldDeclaration -- ToDo
                                lhs.scalaResultType = "Float"

    | TypePrimitiveNumericType_TypeFloating_Double
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Double") @lhs.scalaFieldDeclaration -- ToDo
                                lhs.scalaResultType = "Double"

    | TypePrimitivePrimitivetypeBoolean
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Boolean") @lhs.scalaFieldDeclaration -- ToDo
                                lhs.scalaResultType = "Boolean"

    | TypeReference
                                lhs.scalaFieldDeclaration = @referenceType.scalaFieldDeclaration
                                lhs.scalaResultType = @referenceType.scalaResultType

sem ReferenceType
    | ReferenceTypeClassOrInterfaceType  lhs.scalaFieldDeclaration =  map (addTypeToModifiers (@identifier ++ @zClassOrInterfaceType.scalaFieldDeclInitialization)) @lhs.scalaFieldDeclaration -- ToDo
                                        -- ToDO typeArguments :: TypeArguments
                                        lhs.scalaResultType = @identifier ++ @zClassOrInterfaceType.scalaResultType -- ToDo
sem VariableDeclarators
    | Cons lhs.scalaFieldDeclaration = @hd.scalaFieldDeclaration ++ @tl.scalaFieldDeclaration
           hd.scalaNTab = @lhs.scalaNTab
           tl.scalaNTab = @lhs.scalaNTab
           lhs.scalaNTab = @hd.scalaNTab
    | Nil  lhs.scalaFieldDeclaration  = []
           lhs.scalaNTab = @lhs.scalaNTab

{
addTypeDeclInitialization :: [TypeFieldDeclaration] -> String -> [TypeFieldDeclaration]
addTypeDeclInitialization  [] typeInitialization  = []

addTypeDeclInitialization  ((modifiers, t, variableDeclarators, _):xs) typeInitialization  =
    (modifiers, t, variableDeclarators, (Just typeInitialization)) : addTypeDeclInitialization xs typeInitialization
}
sem VariableDeclarator
    | VariableDeclaratorId
            lhs.scalaFieldDeclaration = @variableDeclaratorId.scalaFieldDeclaration
    | VariableDeclaratorIdAsig
            lhs.scalaFieldDeclaration =
                addTypeDeclInitialization @variableDeclaratorId.scalaFieldDeclaration @variableInitializer.scalaFieldDeclInitialization

sem VariableInitializer
    | VariableInitializerExp
            -- lhs.scalaFieldDeclInitialization = @expression.scalaFieldDeclInitialization
            lhs.scalaFieldDeclInitialization = @expression.scalaExpression
            expression.scalaStatement = "" -- ToDo
    | VariableInitializerArr
            lhs.scalaFieldDeclInitialization = ""
            -- attayInitializer :: ArrayInitializer ToDo

sem ArgumentList
    | Cons
        lhs.scalaFieldDeclInitialization = {
            if @tl.scalaFieldDeclInitialization == "" then
                @hd.scalaExpression
            else
                @hd.scalaExpression ++ "," ++ @tl.scalaFieldDeclInitialization
        } -- ToDo
        -- lhs.scalaExpression = @hd.scalaExpression ++ @tl.scalaExpression -- ToDo
        hd.scalaStatement = ""
    | Nil
        lhs.scalaFieldDeclInitialization = ""

sem Expression
    | ExpressionConditionalExpr
            lhs.scalaExpression = @conditionalOrExpression.scalaExpression -- ToDo
    | ExpressionConditionalExprComb
            lhs.scalaExpression = @conditionalOrExpression1.scalaExpression ++
                                  @expression.scalaExpression

    | ExpressionAssignment
            lhs.scalaExpression = "" -- ToDo

sem ConditionalOrExpression
    | Mod -- :%:
        lhs.scalaExpression =
             @conditionalOrExpression1.scalaExpression ++ " % " ++
             @conditionalOrExpression2.scalaExpression -- ToDo check
    | Or -- :||:
        lhs.scalaExpression =
                @conditionalOrExpression1.scalaExpression ++ " || " ++
                @conditionalOrExpression2.scalaExpression -- ToDo check
    | And -- :&&:
        lhs.scalaExpression =
                @conditionalOrExpression1.scalaExpression ++ " && " ++
                @conditionalOrExpression2.scalaExpression -- ToDo check
    | BitwiseOr  -- :|:
        lhs.scalaExpression =
                @conditionalOrExpression1.scalaExpression ++ " | " ++
                @conditionalOrExpression2.scalaExpression -- ToDo check
    | BitwiseXor -- :^:
        lhs.scalaExpression =
                @conditionalOrExpression1.scalaExpression ++ " ^ " ++
                @conditionalOrExpression2.scalaExpression -- ToDo check
    | BitwiseAnd -- :&:
        lhs.scalaExpression =
                @conditionalOrExpression1.scalaExpression ++ " & " ++
                @conditionalOrExpression2.scalaExpression -- ToDo check
    | EqualTo -- :==:
        lhs.scalaExpression =
                @conditionalOrExpression1.scalaExpression ++ " == " ++
                @conditionalOrExpression2.scalaExpression -- ToDo check
    | NotEqualTo -- :!=:
        lhs.scalaExpression =
                @conditionalOrExpression1.scalaExpression ++ " != " ++
                @conditionalOrExpression2.scalaExpression -- ToDo check
    | LessThan -- :<:
        lhs.scalaExpression =
                @conditionalOrExpression1.scalaExpression ++ " < " ++
                @conditionalOrExpression2.scalaExpression -- ToDo check
    | GreaterThan -- :>:
        lhs.scalaExpression =
                @conditionalOrExpression1.scalaExpression ++ " > " ++
                @conditionalOrExpression2.scalaExpression -- ToDo check
    | LessThanOrEqualTo -- :<=:
        lhs.scalaExpression =
                @conditionalOrExpression1.scalaExpression ++ " <= " ++
                @conditionalOrExpression2.scalaExpression -- ToDo check
    | GreaterThanOrEqualTo -- :>=:
        lhs.scalaExpression =
                @conditionalOrExpression1.scalaExpression ++ " >= " ++
                @conditionalOrExpression2.scalaExpression -- ToDo check
    | LeftShift -- :<<:
        lhs.scalaExpression =
                @conditionalOrExpression1.scalaExpression ++ " << " ++
                @conditionalOrExpression2.scalaExpression -- ToDo check
    | RightShift -- :>>:
        lhs.scalaExpression =
                @conditionalOrExpression1.scalaExpression ++ " >> " ++
                @conditionalOrExpression2.scalaExpression -- ToDo check
    | ZeroFillRightShift -- :>>>:
        lhs.scalaExpression =
                @conditionalOrExpression1.scalaExpression ++ " >>> " ++
                @conditionalOrExpression2.scalaExpression -- ToDo check
    | Add -- :+:
        lhs.scalaExpression =
                @conditionalOrExpression1.scalaExpression ++ " + " ++
                @conditionalOrExpression2.scalaExpression -- ToDo check
    | Sub -- :-:
        lhs.scalaExpression =
                @conditionalOrExpression1.scalaExpression ++ " - " ++
                @conditionalOrExpression2.scalaExpression -- ToDo check
    | Mult -- :*:
        lhs.scalaExpression =
                @conditionalOrExpression1.scalaExpression ++ " * " ++
                @conditionalOrExpression2.scalaExpression -- ToDo check
    | Div -- :/:
        lhs.scalaExpression =
                @conditionalOrExpression1.scalaExpression ++ " / " ++
                @conditionalOrExpression2.scalaExpression -- ToDo check
    | ConditionalOrExpressionUnaryExpression
            lhs.scalaExpression = @unaryExpression.scalaExpression
    | ConditionalOrExpressionIntanceOf
            lhs.scalaExpression = @unaryExpression.scalaExpression -- ToDo check  type_ :: Type

sem UnaryExpression
    | UnaryExpressionPreIncrementExpression
            lhs.scalaExpression =  @unaryExpression.scalaExpression --ToDo
    | UnaryExpressionPreDecrementExpression
            lhs.scalaExpression =  @unaryExpression.scalaExpression --ToDo
    | UnExpMas
            lhs.scalaExpression =  @unaryExpression.scalaExpression --ToDo
    | UnExpMenos
            lhs.scalaExpression =  @unaryExpression.scalaExpression --ToDo
    | PostExpPrimaryPostfixZ
            lhs.scalaExpression =  @primary.scalaExpression --ToDo
            -- zpostfixExpression :: ZPostfixExpression
    | PostfixExpressionPrimary
            lhs.scalaExpression = @primary.scalaExpression
    | Pestan
            lhs.scalaExpression =  @unaryExpression.scalaExpression -- ToDo
    | Admiracion
            lhs.scalaExpression =  @unaryExpression.scalaExpression -- ToDo

sem Primary
    | PrimNoNewArray
            lhs.scalaExpression = @primaryNoNewArray.scalaExpression
    | PrimNoNewArrayZ
            lhs.scalaExpression = @primaryNoNewArray.scalaExpression
                            -- @zprimary.scalaFieldDeclInitialization  --ToDo, check
sem PrimaryNoNewArray
    | PrimaryNoNewArray
                lhs.scalaExpression = @primarynna.scalaExpression
                        -- ToDO zPrimaryNoNewArray :: ZPrimaryNoNewArray
sem PrimaryNNA
    | PrimNNALiteral_IntegerLiteral_DecimalIntegerLiteral
                        lhs.scalaExpression = @string
    | PrimNNALiteral_IntegerLiteral_HexIntegerLiteral
                        lhs.scalaExpression = @string
    | PrimNNALiteral_IntegerLiteral_OctalIntegerLiteral
                        lhs.scalaExpression = @string
    | PrimNNALiteral_FloatingPointLiteral_DecimalFloatingPointLiteral
                        lhs.scalaExpression = @string
    | PrimNNALiteral_FloatingPointLiteral_HexadecimalFloatingPointLiteral
                        lhs.scalaExpression = @string
    | PrimNNALiteral_BooleanLiteral
                        lhs.scalaExpression = { if @bool then "true" else "false" }
    | PrimNNALiteral_CharacterLiteral
                        lhs.scalaExpression = @string  -- ToDo revisar
    | PrimNNALiteral_StringLiteral
                        lhs.scalaExpression = @string
    | PrimNNALiteral_NullLiteral
                        lhs.scalaExpression = "null" -- ToDo revisar
    | PrimNNATypeClassPrimitiveType
                        lhs.scalaExpression = "" -- ToDo analizar si caso entra.
                        -- primitiveType :: PrimitiveType typeZ :: TypeZ
    | PrimNNATypeClassReferenceTypeClassIOT
                        lhs.scalaExpression = @identifier -- ToDo revisar y analizar caso.
                        -- identifier :: Identifier typeArguments :: TypeArguments primNNAClassOrInterfaceType :: PrimNNAClassOrInterfaceType
    | PrimNNATypeClassReferenceTypeTypeVariable
                        lhs.scalaExpression = @identifier -- ToDo revisar caso
                        -- identifier :: Identifier typeZ :: TypeZ
    | PrimNNAVoid
                        lhs.scalaExpression = "Unit" -- ToDo check caso
    | PrimNNAThis
                        lhs.scalaExpression = "this???" -- ToDO check caso
    | PrimNNAClassName
                        lhs.scalaExpression = @typeName.scalaFieldDeclInitialization -- ToDo check
    | PrimNNAParExp
                        lhs.scalaExpression = "(" ++ @expression.scalaExpression ++ ")"
                        expression.scalaStatement = "" -- ToDo
    | UnNotPlusCastExpression
                        lhs.scalaExpression = "" -- ToDo
                        expression.scalaStatement = "" -- ToDo
                        -- expression :: Expression unaryExpression :: UnaryExpression {- ANTES Type        UnaryExpression  -- CONTROLAR COND CONTEXTO -}

    | PrimNNAClassInstanceCreationExpression
                        lhs.scalaExpression = " new " ++ @classOrInterfaceType.scalaFieldDeclInitialization ++ "(" ++ @argumentList.scalaFieldDeclInitialization ++ ")"  -- ToDo ?????
                        -- typeArguments :: TypeArguments classOrInterfaceType :: ClassOrInterfaceType argumentList :: ArgumentList  {- Antes ->                           | PrimNNAClassIns ClassInstanceCreationExpression -}
    | ArrayCreationExpressionPrimitiveType
                        lhs.scalaExpression = "" -- ToDo
                        -- primitiveType :: PrimitiveType dimExprs :: DimExprs                      {- Dims -- ARRAYCreationExpression Aplicar Cond Contexto -}
    | ArrayCreationExpressionClassOrInterf
                        lhs.scalaExpression = "" -- ToDo
                        -- classOrInterfaceType :: ClassOrInterfaceType dimExprs :: DimExprs               {-- Dims -- ARRAYCreationExpression Aplicar Cond Contexto -}
    | ArrayCreationExpressionArrInitialPrim
                        lhs.scalaExpression = "" -- ToDo
                        -- primitiveType :: PrimitiveType dims :: Dims arrayInitilizer :: ArrayInitializer          {-- ARRAYCreationExpression Aplicar Cond Contexto -}
    | ArrayCreationExpressionArrInitialClass
                        lhs.scalaExpression = "" -- ToDo
                        -- classOrInterfaceType :: ClassOrInterfaceType dims :: Dims arrayInitializer :: ArrayInitializer  {-- ARRAYCreationExpression Aplicar Cond Contexto -}
    | PrimNNAFieldAccessPrim
                        lhs.scalaExpression = "" -- ToDo
                        -- primary :: Primary identifier :: Identifier
    | PrimNNAFieldAccessSuper
                        lhs.scalaExpression = @identifier -- ToDo
    | PrimNNAFieldAccessClassName
                        lhs.scalaExpression =  @typeName.scalaFieldDeclInitialization ++ @identifier {-- Antes Identifier -}
                        -- ToDo ?????
    | PrimNNAMethodInvocationMN
                        lhs.scalaExpression = @typeName.scalaFieldDeclInitialization ++ "(" ++  @argumentList.scalaFieldDeclInitialization ++ ")"   -- ToDo
                        -- typeName :: TypeName argumentList :: ArgumentList  {-- Antes MethodName -}
    | PrimNNAMethodInvocationSuper
                        lhs.scalaExpression = "" -- ToDo
                        -- nonWildTypeArguments :: NonWildTypeArguments identifier :: Identifier argumentList :: ArgumentList
    | PrimNNAMethodInvocationClassN
                        lhs.scalaExpression = "" -- ToDo
                        -- typeName :: TypeName nonWildTypeArguments :: NonWildTypeArguments identifier :: Identifier argumentList :: ArgumentList  {- TypeNAme ANtes Identifier CONTROLAR EN COND CONTEXTO -}
    | PrimNNAMethodInvocationTypeN
                        lhs.scalaExpression = "" -- ToDo
                        -- typeName :: TypeName nonWildTypeArguments :: NonWildTypeArguments identifier :: Identifier argumentList :: ArgumentList
    | PrimNNAArrayAccessExprName
                        lhs.scalaExpression = @typeName.scalaFieldDeclInitialization ++ @expression.scalaExpression  -- ToDo
                        expression.scalaStatement = "" -- ToDo
                        -- typeName :: TypeName expression :: Expression  {-- Antes ExpressionName -}
    | PostfixExpressionExpressionName
                        lhs.scalaExpression = @typeName.scalaFieldDeclInitialization

sem VariableDeclaratorId
    | VarDeclaratorId
        lhs.scalaFieldDeclaration = {
            foldl (\x (fs, tp, _, _) -> ((fs, tp, @identifier, Nothing): x))
            ([]::[TypeFieldDeclaration]) @lhs.scalaFieldDeclaration }
        lhs.scalaNTab= @lhs.scalaNTab ++ "\t" -- ToDo Check
        lhs.scalaVariableDeclaratorId = @identifier
    | VarDeclaratorIdVDZ
        lhs.scalaFieldDeclaration = {
            (foldl (\x (fs, tp, _, _) -> ((fs, tp, @identifier, Nothing): x))
            ([]::[TypeFieldDeclaration]) @lhs.scalaFieldDeclaration) ++
            @variableDeclaratorIdZ.scalaFieldDeclaration
        }
        lhs.scalaNTab = @lhs.scalaNTab ++ "\t" -- ToDo Check
        lhs.scalaVariableDeclaratorId = @identifier ++ @variableDeclaratorIdZ.scalaVariableDeclaratorId

sem VariableDeclaratorIdZ
    | VarDeclaratorIdCorchete
                lhs.scalaVariableDeclaratorId = "[]"
    | VarDeclaratorIdZ
                lhs.scalaVariableDeclaratorId = "[]" ++ @variableDeclaratorIdZ.scalaVariableDeclaratorId

sem ResultType
    | ResultTypeType
            type_.scalaFieldDeclaration = []
            lhs.scalaResultType= @type_.scalaResultType
    | ResultTypeVoid
            lhs.scalaResultType = "Unit"

sem FormalParameterList
    | FormalParameterListFormal
        type_.scalaFieldDeclaration = []
        variableDeclaratorId.scalaFieldDeclaration = []
        variableDeclaratorId.scalaNTab = ""

        lhs.scalaMethodFormalParameters = commaTypeParameters (@variableModifiers.scalaMethodFormalParameters ++
                                          @variableDeclaratorId.scalaVariableDeclaratorId ++
                                          ": " ++ @type_.scalaResultType)
                                          @formalParameterList.scalaMethodFormalParameters
    | FormalParameterListLast
        type_.scalaFieldDeclaration = []
        variableDeclaratorId.scalaFieldDeclaration = []
        variableDeclaratorId.scalaNTab = ""

        lhs.scalaMethodFormalParameters = @variableModifiers.scalaMethodFormalParameters ++
                                          @variableDeclaratorId.scalaVariableDeclaratorId ++
                                          ": " ++ @type_.scalaResultType  -- ToDo check  ... case ( 3 points) -- met3(int a, int ...b) es para parametros infinitos
    | FormalParameterListNil
            lhs.scalaMethodFormalParameters = ""

sem ForStatement
    | ForStatementEnhancedForStatementNoVarModif type_.scalaFieldDeclaration = []
    | ForStatementEnhancedForStatement type_.scalaFieldDeclaration = []

sem ForInit
    | ForInitLocalVar
        type_.scalaFieldDeclaration = []
        variableDeclarators.scalaNTab = ""

sem WildcardBounds
    | WilcardBoundsExtendsReferenceType type_.scalaFieldDeclaration = []
    | WilcardBoundsSuperReferenceType type_.scalaFieldDeclaration = []

sem InterfaceMemberDeclaration
    | InterfaceMemberDeclarationConstant
        modifiers.scalaFieldDeclaration = []
        type_.scalaFieldDeclaration = []
        variableDeclarators.scalaFieldDeclaration = []
        variableDeclarators.scalaNTab = ""

        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        modifiers.scalaMethodDeclaration = "" -- ToDo
        lhs.scalaTypeDeclaration = ""
        lhs.scalaBodyNormalInterface = ""
        lhs.scalaExtendClassBodyNormalCD = ""

        lhs.scalaNTab = @lhs.scalaNTab
    | InterfaceMemberDeclarationAbstract
        modifiers.scalaFieldDeclaration = []

        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        modifiers.scalaMethodDeclaration = "" -- ToDo
        lhs.scalaTypeDeclaration = ""
        lhs.scalaBodyNormalInterface = ""
        lhs.scalaExtendClassBodyNormalCD = ""

        lhs.scalaNTab = @lhs.scalaNTab
    | InterfaceMemberDeclTypeDeclarationClassDeclarationNormalCD
        modifiers.scalaFieldDeclaration = []
        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        modifiers.scalaMethodDeclaration = "" -- ToDo
        classBodyDeclarations.scalaNTab = @lhs.scalaNTab ++ "\t"
        lhs.scalaNTab = @lhs.scalaNTab

        lhs.scalaTypeDeclaration =
            @lhs.scalaNTab ++
            (normalClassDeclaration @modifiers.scalaNormalClassDeclaration @lhs.scalaNTab) ++
            @identifier ++
            @typeParameters.scalaTypeDeclaration ++
            @super.scalaTypeDeclaration ++
            @interfaces.scalaTypeDeclaration ++
            " { \n" ++ @classBodyDeclarations.scalaTypeDeclaration ++ @lhs.scalaNTab ++ "}\n\n"

        lhs.scalaBodyNormalInterface = ""
        lhs.scalaExtendClassBodyNormalCD = ""

    | InterfaceMemberDeclTypeDeclarationClassDeclarationEnumD
        modifiers.scalaFieldDeclaration = []
        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        modifiers.scalaMethodDeclaration = "" -- ToDo
        lhs.scalaTypeDeclaration = ""
        lhs.scalaBodyNormalInterface = ""
        lhs.scalaExtendClassBodyNormalCD = ""
        lhs.scalaNTab = @lhs.scalaNTab
        enumBody.scalaNTab = @lhs.scalaNTab ++ "\t"

    | InterfaceMemberDeclTypeDeclarationInterfaceDeclarationNormalInterfaceD
        modifiers.scalaFieldDeclaration = []
        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        modifiers.scalaMethodDeclaration = "" -- ToDo
        listInterfaceMemberDeclaration.scalaNTab = @lhs.scalaNTab ++ "\t"

        lhs.scalaBodyNormalInterface =
            @lhs.scalaNTab ++
            (normalInterfaceDeclaration @modifiers.scalaNormalInterfaceDeclaration @lhs.scalaNTab) ++
            @identifier ++
            @typeParameters.scalaTypeDeclaration ++ --ToDo
            @extendsInterfaces.scalaExtendInterface ++
            " {\n" ++ @listInterfaceMemberDeclaration.scalaBodyNormalInterface ++ @lhs.scalaNTab ++  "}\n\n"

        lhs.scalaTypeDeclaration = ""
        lhs.scalaExtendClassBodyNormalCD = ""
        lhs.scalaNTab = @lhs.scalaNTab
    | InterfaceMemberDeclTypeDeclarationInterfaceDeclarationAnnotationTypeD
        modifiers.scalaFieldDeclaration = []
        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        modifiers.scalaMethodDeclaration = "" -- ToDo
        lhs.scalaTypeDeclaration = ""
        lhs.scalaBodyNormalInterface = ""
        lhs.scalaExtendClassBodyNormalCD = ""
        listAnnotationTypeElementDeclaration.scalaNTab = @lhs.scalaNTab
        lhs.scalaNTab = @lhs.scalaNTab
    | InterfaceMemberDeclTypeDeclarationSemiColon
        lhs.scalaTypeDeclaration = ""
        lhs.scalaBodyNormalInterface = ""
        lhs.scalaExtendClassBodyNormalCD = ""
        lhs.scalaNTab = @lhs.scalaNTab

sem ConditionalOrExpression
    | ConditionalOrExpressionIntanceOf
            type_.scalaFieldDeclaration = []


sem Catches
    | Cons hd.scalaNTab = @lhs.scalaNTab
           tl.scalaNTab = @hd.scalaNTab
           lhs.scalaNTab = @tl.scalaNTab
           lhs.scalaStatement = @hd.scalaStatement ++ @tl.scalaStatement -- ToDo
    | Nil  lhs.scalaNTab = @lhs.scalaNTab
           lhs.scalaStatement = ""

sem CatchClause
    | CatchClause
        type_.scalaFieldDeclaration = []
        variableDeclaratorId.scalaNTab = ""
        blockStatements.scalaNTab = @lhs.scalaNTab
        lhs.scalaNTab = @lhs.scalaNTab
        lhs.scalaStatement = "" -- ToDo

sem BlockStatements
    | Cons hd.scalaNTab = @lhs.scalaNTab
           tl.scalaNTab = @hd.scalaNTab
           lhs.scalaNTab = @tl.scalaNTab
           lhs.scalaStatement = @hd.scalaStatement ++ @tl.scalaStatement -- ToDO
    | Nil lhs.scalaNTab = @lhs.scalaNTab
          lhs.scalaStatement = ""

sem BlockStatement
    | BlockStatementLocalVariableDeclarationStatement
        modifiers.scalaFieldDeclaration = ([("", False, False)], "", "", Nothing) : []
        type_.scalaFieldDeclaration = @modifiers.scalaFieldDeclaration
        variableDeclarators.scalaNTab = @lhs.scalaNTab
        variableDeclarators.scalaFieldDeclaration = @type_.scalaFieldDeclaration

        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        modifiers.scalaMethodDeclaration = "" -- ToDo
        lhs.scalaNTab = @lhs.scalaNTab

        lhs.scalaStatement = {checkVariableDeclarators @variableDeclarators.scalaFieldDeclaration @variableDeclarators.scalaNTab}
    | BlockStatementClassDeclarationNormalClassDeclaration
        modifiers.scalaFieldDeclaration = [] -- ToDo
        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        modifiers.scalaMethodDeclaration = "" -- ToDo
        classBodyDeclarations.scalaNTab = @lhs.scalaNTab ++ "\t"
        lhs.scalaNTab = @lhs.scalaNTab

        lhs.scalaStatement =
          @lhs.scalaNTab ++
          (normalClassDeclaration @modifiers.scalaNormalClassDeclaration @lhs.scalaNTab) ++
          @identifier ++
          @typeParameters.scalaTypeDeclaration ++ -- ToDo
          @super.scalaTypeDeclaration ++
          @interfaces.scalaTypeDeclaration ++
          " { \n" ++ @classBodyDeclarations.scalaTypeDeclaration ++ @lhs.scalaNTab ++
          "\n}\n\n"

    | BlockStatementClassDeclarationEnumDeclaration
        modifiers.scalaFieldDeclaration = [] -- ToDo

        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        modifiers.scalaMethodDeclaration = "" -- ToDo
        enumBody.scalaNTab = @lhs.scalaNTab ++ "\t"
        lhs.scalaNTab = @lhs.scalaNTab
        lhs.scalaStatement = ""
    | BlockStatementStatement
            lhs.scalaNTab = @lhs.scalaNTab
            statement.scalaStatement = @lhs.scalaStatement
            lhs.scalaStatement = "\n" ++ @lhs.scalaNTab ++ @statement.scalaStatement

sem Statement
    | StatementLabeled
                       statement.scalaNTab = @lhs.scalaNTab
                       lhs.scalaNTab = @statement.scalaNTab
                       statement.scalaStatement = @lhs.scalaStatement
                       lhs.scalaStatement = @statement.scalaStatement -- ToDO no considerar label
    | StatementIf
                    statement.scalaNTab = @lhs.scalaNTab
                    lhs.scalaNTab = @statement.scalaNTab
                    expression.scalaStatement = @lhs.scalaStatement -- ToDo Check
                    statement.scalaStatement = @expression.scalaStatement --- ToDO Check
                    lhs.scalaStatement = "if (" ++ @expression.scalaStatement ++ ")" ++ @statement.scalaStatement -- ToDo
                    -- expression :: Expression statement :: Statement {- IfThenStatement -}


    | StatementIfElse
                      statement1.scalaNTab = @lhs.scalaNTab
                      statement2.scalaNTab = @lhs.scalaNTab
                      lhs.scalaNTab = @statement2.scalaNTab
                      expression.scalaStatement = @lhs.scalaStatement -- ToDo Check
                      statement1.scalaStatement = @expression.scalaStatement --- ToDO Check
                      statement2.scalaStatement = @statement1.scalaStatement --- ToDO Check
                      lhs.scalaStatement = "if (" ++ @expression.scalaStatement ++ ") " ++
                                            @statement1.scalaStatement ++
                                            @statement2.scalaStatement -- ToDo {- IfThenElseStatement -}

    | StatementWhile
                     statement.scalaNTab = @lhs.scalaNTab
                     lhs.scalaNTab = @statement.scalaNTab
                     expression.scalaStatement = @lhs.scalaStatement -- ToDo Check
                     lhs.scalaStatement = " while ( " ++ @expression.scalaStatement  ++ " )" ++
                                          @statement.scalaStatement  -- ToDo {- WhileStatement -}

    | StatementFor
                    forStatement.scalaNTab = @lhs.scalaNTab -- ToDo
                    lhs.scalaNTab = @lhs.scalaNTab
                    lhs.scalaStatement = "" -- ToDo  forStatement

    | SWTSBlock
                    blockStatement.scalaNTab = @lhs.scalaNTab
                    lhs.scalaNTab = @blockStatement.scalaNTab

                    blockStatement.scalaStatement = @lhs.scalaStatement
                    lhs.scalaStatement = {
                            if (@lhs.scalaStatement == "") then
                                ""
                            else
                                @lhs.scalaNTab ++  @blockStatement.scalaStatement
                    }

    | SWTSEmptyStatement
                    lhs.scalaNTab = @lhs.scalaNTab
                    lhs.scalaStatement = ""

    | SWTSExpressionStatement
                    lhs.scalaNTab = @lhs.scalaNTab
                    expression.scalaStatement = @lhs.scalaStatement
                    lhs.scalaStatement = @expression.scalaExpression

    | SWTSAssertStatementCond
                    lhs.scalaNTab = @lhs.scalaNTab
                    -- expression.scalaStatement = @lhs.scalaStatement -- ToDo
                    lhs.scalaStatement = "" -- @expression.scalaStatement -- ToDo

    | SWTSAssertStatementCondEx
                    lhs.scalaNTab = @lhs.scalaNTab
                    -- expression.scalaStatement = @lhs.scalaStatement -- ToDo
                    lhs.scalaStatement = "" -- @expression.scalaStatement -- ToDo
                    -- conditionalExpression :: ConditionalExpression

    | SWTSSwitchStatement
                    lhs.scalaNTab = @lhs.scalaNTab
                    expression.scalaStatement = @lhs.scalaStatement -- ToDo
                    lhs.scalaStatement = @expression.scalaStatement -- ToDo -- expression :: Expression
                    -- switchBlock :: SwitchBlock

    | SWTSDoStatement
                    lhs.scalaNTab = @lhs.scalaNTab
                    statement.scalaStatement = @lhs.scalaStatement -- ToDo
                    expression.scalaStatement = @statement.scalaStatement -- ToDo
                    lhs.scalaStatement = @statement.scalaStatement ++ @expression.scalaStatement -- ToDo statement :: Statement

    | SWTSBreakStatement
                    lhs.scalaNTab = @lhs.scalaNTab
                    lhs.scalaStatement = "" --ToDo

    | SWTSBreakStatementId
                    lhs.scalaNTab = @lhs.scalaNTab
                    lhs.scalaStatement = "" -- ToDo identifier :: Identifier

    | SWTSNilContinueStatement
                    lhs.scalaNTab = @lhs.scalaNTab
                    lhs.scalaStatement = "" -- ToDo

    | SWTSContinueStatement
                    lhs.scalaNTab = @lhs.scalaNTab
                    lhs.scalaStatement = "" -- ToDo identifier

    | SWTSReturnStatement
                    lhs.scalaNTab = @lhs.scalaNTab
                    expression.scalaStatement = @lhs.scalaStatement
                    lhs.scalaStatement = @expression.scalaExpression

    | SWTSNilReturnStatement
                    lhs.scalaNTab = @lhs.scalaNTab
                    lhs.scalaStatement = "()" -- ToDo

    | SWTSynchronizedStatement
                    blockStatements.scalaNTab = @lhs.scalaNTab
                    lhs.scalaNTab = @blockStatements.scalaNTab
                    expression.scalaStatement = @lhs.scalaStatement -- ToDo
                    blockStatements.scalaStatement = @expression.scalaStatement -- ToDo
                    lhs.scalaStatement = "" -- ToDo  @expression.scalaStatement ++  @blockStatements.scalaStatement -- ToDo

    | SWTTrhowStatement
                    lhs.scalaNTab = @lhs.scalaNTab
                    expression.scalaStatement = @lhs.scalaStatement
                    lhs.scalaStatement = "" -- @expression.scalaStatement ToDo

    | SWTTryStatement
                    blockStatements.scalaNTab = @lhs.scalaNTab
                    catches.scalaNTab = @lhs.scalaNTab
                    lhs.scalaNTab = @blockStatements.scalaNTab
                    blockStatements.scalaStatement = @lhs.scalaStatement -- ToDo
                    catches.scalaStatement = @blockStatements.scalaStatement -- ToDo
                    lhs.scalaStatement = "" -- @blockStatements.scalaStatement ++ @catches.scalaStatement

    | SWTTryStatementFinally
                    blockStatements1.scalaNTab = @lhs.scalaNTab
                    catches.scalaNTab = @blockStatements1.scalaNTab
                    blockStatements2.scalaNTab = @catches.scalaNTab
                    lhs.scalaNTab = @blockStatements2.scalaNTab
                    lhs.scalaStatement = "" -- ToDo

sem SwitchBlock
    | SwitchBlockAll
                    switchBlockStatementGrooups.scalaNTab = @lhs.scalaNTab ++ "\t" -- ToDo , check if is correct.
                    lhs.scalaNTab = @lhs.scalaNTab
    | SwitchBlockLabels
                    lhs.scalaNTab = @lhs.scalaNTab
    | SwitchBlockGroups
                    switchBlockStatementGroups.scalaNTab = @lhs.scalaNTab ++ "\t" --ToDo check if is correct.
                    lhs.scalaNTab = @lhs.scalaNTab
    | NilSwitchBlock
                    lhs.scalaNTab = @lhs.scalaNTab

sem SwitchBlockStatementGroups
    | Cons hd.scalaNTab = @lhs.scalaNTab
           tl.scalaNTab = @hd.scalaNTab
           lhs.scalaNTab = @tl.scalaNTab
    | Nil lhs.scalaNTab = @lhs.scalaNTab

sem SwitchBlockStatementGroup
    | SwitchBlockStatementGroup blockStatements.scalaNTab = @lhs.scalaNTab ++ "\t"
                                blockStatements.scalaStatement = "" -- ToDo

sem ArrayInitializer
    | ArrayInitializer
        variableInitializers.scalaFieldDeclaration = [] -- ToDo
        variableInitializers.scalaNTab = "" -- ToDo

sem ListAnnotationTypeElementDeclaration
    | Cons hd.scalaNTab = @lhs.scalaNTab
           tl.scalaNTab = @hd.scalaNTab
           lhs.scalaNTab = @tl.scalaNTab
    | Nil lhs.scalaNTab = @lhs.scalaNTab

sem AnnotationTypeElementDeclaration
    | AnnTypeElemDeclAbstract
        modifiers.scalaFieldDeclaration = [] -- ToDo
        type_.scalaFieldDeclaration = [] -- ToDo

        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        modifiers.scalaMethodDeclaration = "" -- ToDo
        lhs.scalaNTab = @lhs.scalaNTab

    | AnnTypeElemDeclConstant
        modifiers.scalaFieldDeclaration = [] -- ToDo
        type_.scalaFieldDeclaration = [] -- ToDo
        variableDeclarators.scalaNTab = "" -- ToDo check if is neccesary for parent

        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        modifiers.scalaMethodDeclaration = "" -- ToDo
        lhs.scalaNTab = @lhs.scalaNTab
    | AnnTypeElemDeclTypeDeclarationClassDeclarationNormalCD
        modifiers.scalaFieldDeclaration = [] -- ToDo
        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        modifiers.scalaMethodDeclaration = "" -- ToDo
        classBodyDeclarations.scalaNTab = @lhs.scalaNTab ++ "\t" -- ToDo, check
        lhs.scalaNTab = @lhs.scalaNTab

    | AnnTypeElemDeclTypeDeclarationClassDeclarationEnumD
        modifiers.scalaFieldDeclaration = [] -- ToDo

        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        modifiers.scalaMethodDeclaration = "" -- ToDo
        enumBody.scalaNTab = @lhs.scalaNTab --ToDo
        lhs.scalaNTab = @lhs.scalaNTab
    | AnnTypeElemDeclTypeDeclarationInterfaceDeclarationNormalInterfaceD
        modifiers.scalaFieldDeclaration = [] -- ToDo

        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        modifiers.scalaMethodDeclaration = "" -- ToDo

        listInterfaceMemberDeclaration.scalaNTab = @lhs.scalaNTab -- ToDo
        lhs.scalaNTab = @lhs.scalaNTab
    | AnnTypeElemDeclTypeDeclarationInterfaceDeclarationAnnotationTypeD
        modifiers.scalaFieldDeclaration = [] -- ToDo

        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        modifiers.scalaMethodDeclaration = "" -- ToDo

        listAnnotationsTypeElementDeclaration.scalaNTab = @lhs.scalaNTab
        lhs.scalaNTab = @lhs.scalaNTab

sem ActualTypeArgument
    | ActualTypeReferenceType type_.scalaFieldDeclaration = [] -- ToDo

sem EnumBody
    | EnumBody enumConstants.scalaNTab = @lhs.scalaNTab
               enumBodyDeclarations.scalaNTab = @enumConstants.scalaNTab
               lhs.scalaNTab = @enumBodyDeclarations.scalaNTab

sem EnumBodyDeclarations
    | EnumBodyDeclarations classBodyDeclarations.scalaNTab = @lhs.scalaNTab -- ToDo check
                           lhs.scalaNTab = @lhs.scalaNTab

sem EnumConstants
    | EnumConstants enumConstant.scalaNTab = @lhs.scalaNTab
                    enumConstants.scalaNTab = @enumConstant.scalaNTab
                    lhs.scalaNTab = @enumConstants.scalaNTab
    | NilEnumConstants lhs.scalaNTab = @lhs.scalaNTab

sem EnumConstant
    | EnumConstantAll classBodyDeclarations.scalaNTab = @lhs.scalaNTab
                      lhs.scalaNTab = @lhs.scalaNTab
    | EnumConstantClasB classBodyDeclaratiosn.scalaNTab = @lhs.scalaNTab
                         lhs.scalaNTab = @lhs.scalaNTab

sem MethodBody
    | MethodBodyBlock
                        blokStatements.scalaNTab = @lhs.scalaNTab
                        blokStatements.scalaStatement = ""
                        lhs.scalaMethodBody = @blokStatements.scalaStatement
                        lhs.scalaNTab = @lhs.scalaNTab
    | MethodBodySemiColon
                        lhs.scalaNTab = @lhs.scalaNTab
                        lhs.scalaMethodBody = ""

sem ConstructorBody
    | ConstructorBody
                      blockStatements.scalaNTab = @lhs.scalaNTab
                      blockStatements.scalaStatement = ""
                      lhs.scalaMethodBody = @blockStatements.scalaStatement
                      lhs.scalaNTab = @blockStatements.scalaNTab

sem ForStatement
    | ForStatementBasicForStatementAll      statement.scalaNTab = @lhs.scalaNTab
                                            expression.scalaStatement = "" -- ToDo
                                            lhs.scalaNTab = @statement.scalaNTab

    | ForStatementBasicForStatementNoExp    statement.scalaNTab = @lhs.scalaNTab
                                            statement.scalaStatement = "" -- ToDo
                                            lhs.scalaNTab = @statement.scalaNTab

    | ForStatementEnhancedForStatement      statement.scalaNTab = @lhs.scalaNTab
                                            expression.scalaStatement = "" -- ToDo
                                            lhs.scalaNTab = @statement.scalaNTab

    | ForStatementEnhancedForStatementNoVarModif
                                            statement.scalaNTab = @lhs.scalaNTab
                                            expression.scalaStatement = "" -- ToDo
                                            lhs.scalaNTab = @statement.scalaNTab

sem MethodDeclarator
    | MethodDeclaratorFormalPL
                lhs.scalaMethodDeclaration = @identifier ++ "(" ++
                                             @formalParameterList.scalaMethodFormalParameters ++ ")"
    | MethodDeclaratorSingle
                lhs.scalaMethodDeclaration = @identifier

sem VariableModifiers
    | VariableModifiers
                lhs.scalaMethodFormalParameters = @variableModifier.scalaMethodFormalParameters ++ " " ++
                                                  @variableModifiers.scalaMethodFormalParameters
    | NilVariableModifiers
                lhs.scalaMethodFormalParameters = ""

sem VariableModifier
    | VariableModifierFinal
                lhs.scalaMethodFormalParameters = "final"
    | VariableModifierAnnotation
                lhs.scalaMethodFormalParameters = "" -- ToDo
        -- annotation :: Annotation

sem ArrayAccess
    | ArrayAccessExpName  -- identifiers :: Identifiers
                        expression.scalaStatement = ""
    | ArrayAccessPrimNNA -- primaryNoNewArray :: PrimaryNoNewArray
                        expression.scalaStatement = ""

sem ConditionalExpression
    -- | ConditionalExpr conditionalOrExpression
    | ConditionalExprComb
       --         conditionalOrExpression
                expression.scalaStatement = "" -- ToDO
       --         conditionalExpression

sem DimExprs
    | DimExprs expression.scalaStatement = "" -- ToDo
    --           dimExprs :: DimExprs
    -- | NilDimExprsDims dims :: Dims
    -- | NilDimExprs

sem StatementExpressionList
    | StatementExpressionList
                            expression.scalaStatement = "" -- ToDo
   --                           statementExpressionList :: StatementExpressionList
   -- | NilStatementExpressionList

sem SwitchLabel
    | SwitchLabelConstant expression.scalaStatement = "" -- ToDo
   -- | SwitchLabelEnum identifiers :: Identifier
   -- | SwitchLabelDefault

sem ZPrimaryOrExpression
    | ZPOEExpressionDeArrayAccess
                    expression.scalaStatement = "" -- ToDo
--    | ZPOEZPrimary zPrimary :: ZPrimary

-- ------------------------------------------------
-- J2S scala code
-- ------------------------------------------------
attr J2s
     syn scalaCode :: String

sem J2s
    | J2s lhs.scalaCode = @packageDeclaration.scalaPackageDeclaration ++
                          @importDeclarations.scalaImportDeclaration ++
                          @typeDeclarations.scalaTypeDeclaration
          typeDeclarations.scalaNTab = ""

module {AG.J2SAttrSem}
{} -- Exports of this module, empty for none
{
import Data.List
import qualified Data.Text as T
import Data.String.Utils
}
include "Syntax.ag"

-- ------------------------------------------------
-- Import Declaration
-- ------------------------------------------------
attr TypeName PackageOrTypeName
    syn importDeclarationList :: {[String]}

attr ImportDeclaration ImportDeclarations
    syn scalaImportDeclaration :: String

sem TypeName
    | TypeName
            lhs.importDeclarationList = @identifier : @typeName.importDeclarationList
            lhs.scalaFieldDeclInitialization = @identifier ++ @typeName.scalaFieldDeclInitialization
    | NilTypeName
            lhs.scalaFieldDeclInitialization = ""
            lhs.importDeclarationList = []

sem PackageOrTypeName
    | NilPackageOrTypeName  lhs.importDeclarationList = []
    | PackageOrTypeName lhs.importDeclarationList = @identifier : @packageOrTypeName.importDeclarationList

sem ImportDeclaration
    | SingleTypeImportDeclaration lhs.scalaImportDeclaration =
        "import" ++ " " ++ foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @typeName.importDeclarationList
    | TypeImportOnDemandDeclaration lhs.scalaImportDeclaration =
        "import" ++ " " ++
        foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @packageOrTypeName.importDeclarationList ++
        "._"
    | SingleStaticImportDeclaration lhs.scalaImportDeclaration =
        "import" ++ " " ++ foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @typeName.importDeclarationList
    | StaticImportOnDemandDeclaration lhs.scalaImportDeclaration =
        "import" ++ " " ++ foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @typeName.importDeclarationList ++
        "._"

sem ImportDeclarations
    | ImportDeclarations lhs.scalaImportDeclaration =
        @importDeclaration.scalaImportDeclaration ++ "\n" ++ @importDeclarations.scalaImportDeclaration
    | NilImportDeclarations  lhs.scalaImportDeclaration = ""

-- ------------------------------------------------
-- Package declaration
-- ------------------------------------------------
set ScalaPackageDeclaration = PackageDeclaration

attr ScalaPackageDeclaration
    syn scalaPackageDeclaration :: String

attr PackageName
    syn scalaPackageDeclarationList :: {[String]}

sem PackageDeclaration
    | PackageDeclaration lhs.scalaPackageDeclaration =
        "package " ++ foldl (\x y -> (if x == "" then y else x ++ "." ++ y)) ("") @packageName.scalaPackageDeclarationList ++ "\n\n"
    | NilPackageDeclaration lhs.scalaPackageDeclaration = "\n"

sem PackageName
    | Nil  lhs.scalaPackageDeclarationList = []
    | Cons lhs.scalaPackageDeclarationList = @hd : @tl.scalaPackageDeclarationList

-- ------------------------------------------------
-- Type declarations
-- ------------------------------------------------
set ScalaAllNTab = TypeDeclarations TypeDeclaration
                EnumBody EnumBodyDeclarations EnumConstants EnumConstant
                ListAnnotationTypeElementDeclaration AnnotationTypeElementDeclaration
                ClassBodyDeclarations ClassBodyDeclaration ConstructorBody
                BlockStatements BlockStatement
                MethodBody
                Statement ForStatement
                Catches CatchClause
                SwitchBlock SwitchBlockStatementGroups SwitchBlockStatementGroup
                ListInterfaceMemberDeclaration InterfaceMemberDeclaration
                VariableDeclarators
                VariableDeclarator
                VariableDeclaratorId VariableDeclaratorIdZ
                VariableInitializer
                VariableInitializers


set ScalaAllTypeDeclaration = TypeDeclarations TypeDeclaration
                            TypeParameters TypeParameterList TypeParameter TypeBound
                            ZCOITTypeDeclSpecifier ZClassOrInterfaceType ClassOrInterfaceType
                            Super
                            Interfaces
                            ClassBodyDeclarations ClassBodyDeclaration
                            InterfaceMemberDeclaration

attr ScalaAllTypeDeclaration
     syn scalaTypeDeclaration :: String

set ScalaFieldDeclaration = VariableDeclarators VariableDeclarator
                         VariableDeclaratorId VariableDeclaratorIdZ
                         VariableInitializer
                         VariableInitializers
                         Type
                         PrimitiveOrReferenceType
                         ReferenceType
                         Modifiers
                         Modifier

set ScalaFieldDeclInitialization = VariableInitializer
                                    Expression ArgumentList
                                    ConditionalOrExpression
                                    UnaryExpression
                                    TypeName
                                    Primary
                                    PrimaryNoNewArray
                                    PrimaryNNA
                                    ClassOrInterfaceType ZClassOrInterfaceType ZCOITTypeDeclSpecifier

attr ScalaAllNTab
    chn scalaNTab :: String

-- modifiers type variableName
{
    -- Modifier isStatic isFinal
type TypeModifierIsStaticIsFinal = (String, Bool, Bool)
-- Modifiers Types Variables
type TypeFieldInitialization = Maybe String
type TypeFieldDeclaration = ([TypeModifierIsStaticIsFinal], String, String, TypeFieldInitialization)
}
attr ScalaFieldDeclaration
    chn scalaFieldDeclaration :: {[TypeFieldDeclaration]}

attr ScalaFieldDeclInitialization
    syn scalaFieldDeclInitialization :: String

-- ------------------------------------------------
-- NormalClassDeclaration
-- ------------------------------------------------

set ScalaNormalClassDeclaration = Modifiers
                                Modifier

set ScalaSuperTypeDeclaration = ClassOrInterfaceType
                              ZClassOrInterfaceType
                              ZCOITTypeDeclSpecifier

set ScalaImplementsInterfaceTypeDeclaration =  InterfaceTypeList ClassOrInterfaceType
                                            ZClassOrInterfaceType
                                            ZCOITTypeDeclSpecifier

set ScalaExtendClassBodyNormalCD = ExtendsInterfaces
                                 ClassOrInterfaceType
                                 ZClassOrInterfaceType
                                 ZCOITTypeDeclSpecifier
                                 ListInterfaceMemberDeclaration
                                 InterfaceMemberDeclaration

attr ScalaNormalClassDeclaration
    chn scalaNormalClassDeclaration :: TypeModifierIsStaticIsFinal

attr ScalaSuperTypeDeclaration
    syn scalaSuperTypeDeclaration :: String

attr ScalaImplementsInterfaceTypeDeclaration
    syn scalaImplementsInterfaceTypeDeclaration :: String

attr ScalaExtendClassBodyNormalCD
    syn scalaExtendClassBodyNormalCD :: String

-- ------------------------------------------------
-- NormalInterfaceDeclaration
-- ------------------------------------------------
set ScalaNormalInterfaceDeclaration = Modifiers
                                    Modifier

set ScalaExtendInterface = ExtendsInterfaces
                          ClassOrInterfaceType
                          ZClassOrInterfaceType
                          ZCOITTypeDeclSpecifier

set ScalaBodyNormalInterface = ListInterfaceMemberDeclaration
                                InterfaceMemberDeclaration

attr ScalaNormalInterfaceDeclaration
    chn scalaNormalInterfaceDeclaration :: TypeModifierIsStaticIsFinal

attr ScalaExtendInterface
    syn scalaExtendInterface ::  String

attr ScalaBodyNormalInterface
    syn scalaBodyNormalInterface :: String

-- -----------------------------------------------
-- sem Type declarations
-- ------------------------------------------------
{
-- modifiers of normalClassDeclaration
normalClassDeclaration :: TypeModifierIsStaticIsFinal -> String -> String
normalClassDeclaration ("", False, b2) nTab = "class" ++ " "
normalClassDeclaration ("", True, b2)  bTab = "object" ++ " "
normalClassDeclaration (str, b1, b2) nTab = if b1 then
                                            (strictFpTab str nTab) ++ " " ++ "object" ++ " "
                                       else
                                            (strictFpTab str nTab) ++ " " ++ "class" ++ " "

strictFpTab :: String -> String -> String
strictFpTab str nTab = (replace "@scala.annotation.strictfp\n" ("@scala.annotation.strictfp\n" ++ nTab) str)

}

{
-- modifiers of normalinterfaceDeclaration
normalInterfaceDeclaration :: TypeModifierIsStaticIsFinal -> String -> String
normalInterfaceDeclaration ("", False, b2) nTab = "trait" ++ " "
normalInterfaceDeclaration ("", True, b2) nTab = "object" ++ " "
normalInterfaceDeclaration (str, b1, b2) nTab = if b1 then
                                                (strictFpTab str nTab) ++ " " ++ "object" ++ " "
                                            else
                                                (strictFpTab str nTab) ++ " " ++ "trait" ++ " "
}

sem TypeDeclarations
    | Cons lhs.scalaTypeDeclaration = @hd.scalaTypeDeclaration ++ "\n" ++ @tl.scalaTypeDeclaration
           hd.scalaNTab = @lhs.scalaNTab
           tl.scalaNTab = @hd.scalaNTab
           lhs.scalaNTab = @tl.scalaNTab
    | Nil  lhs.scalaTypeDeclaration = ""
           lhs.scalaNTab = @lhs.scalaNTab

sem TypeDeclaration
    | TypeDeclarationClassDeclarationNormalCD
                              modifiers.scalaFieldDeclaration = []  -- ToDo
                              modifiers.scalaNormalClassDeclaration = ("", False, False)
                              modifiers.scalaNormalInterfaceDeclaration = ("", False, False)
                              classBodyDeclarations.scalaNTab = @lhs.scalaNTab ++ "\t"
                              lhs.scalaNTab = @lhs.scalaNTab

                              lhs.scalaTypeDeclaration =
                                  @lhs.scalaNTab ++
                                  (normalClassDeclaration @modifiers.scalaNormalClassDeclaration @lhs.scalaNTab) ++
                                  @identifier ++
                                  @typeParameters.scalaTypeDeclaration ++ -- ToDo
                                  @super.scalaTypeDeclaration ++
                                  @interfaces.scalaTypeDeclaration ++
                                  " { \n" ++ @classBodyDeclarations.scalaTypeDeclaration ++ @lhs.scalaNTab ++ "}\n\n"

    | TypeDeclarationClassDeclarationEnumD
                                modifiers.scalaFieldDeclaration = []
                                lhs.scalaTypeDeclaration = "" -- ToDO modifiers :: Modifiers
                                modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
                                modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo

                                enumBody.scalaNTab = @lhs.scalaNTab ++ "\t"
                                lhs.scalaNTab = @lhs.scalaNTab

    | TypeDeclarationInterfaceDeclarationNormalInterfaceD
                                modifiers.scalaFieldDeclaration = []

                                modifiers.scalaNormalClassDeclaration = ("", False, False)
                                modifiers.scalaNormalInterfaceDeclaration = ("", False, False)
                                listInterfaceMemberDeclarations.scalaNTab = @lhs.scalaNTab ++ "\t"
                                lhs.scalaNTab = @lhs.scalaNTab

                                lhs.scalaTypeDeclaration =
                                    @lhs.scalaNTab ++
                                    (normalInterfaceDeclaration @modifiers.scalaNormalInterfaceDeclaration @lhs.scalaNTab) ++
                                    @identifier ++
                                    @typeParameters.scalaTypeDeclaration ++ --ToDo
                                    @extendsInterfaces.scalaExtendInterface ++
                                    " {\n" ++ @listInterfaceMemberDeclarations.scalaBodyNormalInterface ++ @lhs.scalaNTab ++ "}\n\n"

    | TypeDeclarationInterfaceDeclarationAnnotationTypeD
                                modifiers.scalaFieldDeclaration = []
                                lhs.scalaTypeDeclaration = "" -- ToDO  modifiers :: Modifiers

                                modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
                                listAnnotationTypeElementDeclaration.scalaNTab = @lhs.scalaNTab
                                lhs.scalaNTab = @lhs.scalaNTab

                                modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
    | TypeDeclarationSemiColon  lhs.scalaTypeDeclaration = "" -- ToDO review how to convert this case to Scala
                                lhs.scalaNTab = @lhs.scalaNTab

sem ExtendsInterfaces
    | ExtendsInterfaceType
                lhs.scalaExtendInterface =  @classOrInterfacesType.scalaExtendInterface ++ @extendsInterfaces.scalaExtendInterface
                lhs.scalaExtendClassBodyNormalCD = @classOrInterfacesType.scalaExtendInterface ++ @extendsInterfaces.scalaExtendClassBodyNormalCD
    | NilExtendsInterfaces
                lhs.scalaExtendInterface = ""
                lhs.scalaExtendClassBodyNormalCD = ""

{
concatenateModifiers :: [TypeFieldDeclaration] -> TypeFieldDeclaration -> [TypeFieldDeclaration]
concatenateModifiers [] tpl = tpl:[]
concatenateModifiers ((f,s,t,ti):[]) (ftpl, stpl, ttpl, titpl) = ((ftpl ++ f), s, t, ti):[]

changeOrderVolatileTransient :: [TypeFieldDeclaration] -> [TypeFieldDeclaration]
changeOrderVolatileTransient modifiers = map (\tdf -> partition' tdf) modifiers
    where
        partition' (ms, t, v, ti) =  ((joinTuple (partition (\(m, _, _) -> (m == "@volatile" || m == "@transient")) ms)), t, v, ti)
        joinTuple (fst, snd) = fst ++ snd
}

{
-- modifiers functions for normalClassDeclaration.
strictFpModifier :: TypeModifierIsStaticIsFinal -> TypeModifierIsStaticIsFinal
strictFpModifier (str, b1, b2) = if T.isInfixOf (T.pack("strfp")) (T.pack(str))
                                        then ("@scala.annotation.strictfp\n" ++ T.unpack(T.strip(T.pack(replace "strfp" "" str))), b1, b2)
                                        else (T.unpack(T.strip(T.pack(str))), b1, b2)

joinTypeModifier :: TypeModifierIsStaticIsFinal -> TypeModifierIsStaticIsFinal -> TypeModifierIsStaticIsFinal
joinTypeModifier ("", b1, b11) (str2, b2, b22) = (T.unpack(T.strip(T.pack(str2))), b1 || b2, b11 || b22)
joinTypeModifier (str1, b1, b11) ("", b2, b22) = (T.unpack(T.strip(T.pack(str1))), b1 || b2, b11 || b22)
joinTypeModifier (str1, b1, b11) (str2, b2, b22) = (T.unpack(T.strip(T.pack(str1))) ++  " " ++ T.unpack(T.strip(T.pack(str2))), b1 || b2, b11 || b22)

}

sem Modifiers
    | Modifiers
                    modifier.scalaFieldDeclaration = @lhs.scalaFieldDeclaration
                    modifiers.scalaFieldDeclaration = @modifier.scalaFieldDeclaration
                    lhs.scalaFieldDeclaration = changeOrderVolatileTransient @modifiers.scalaFieldDeclaration   -- ToDO check static final, etc

                    modifier.scalaNormalClassDeclaration = @lhs.scalaNormalClassDeclaration
                    modifiers.scalaNormalClassDeclaration = @modifier.scalaNormalClassDeclaration
                    lhs.scalaNormalClassDeclaration = strictFpModifier @modifiers.scalaNormalClassDeclaration

                    modifier.scalaNormalInterfaceDeclaration = @lhs.scalaNormalInterfaceDeclaration
                    modifiers.scalaNormalInterfaceDeclaration = @modifier.scalaNormalInterfaceDeclaration
                    lhs.scalaNormalInterfaceDeclaration = strictFpModifier @modifiers.scalaNormalInterfaceDeclaration

    | NilModifiers  lhs.scalaFieldDeclaration = changeOrderVolatileTransient @lhs.scalaFieldDeclaration

                    lhs.scalaNormalClassDeclaration = @lhs.scalaNormalClassDeclaration

                    lhs.scalaNormalInterfaceDeclaration = @lhs.scalaNormalInterfaceDeclaration

sem Modifier
    | ModifierAnnotation lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", False, False)], "", "", Nothing): @lhs.scalaFieldDeclaration)} -- ToDO annotation :: Annotation

                         lhs.scalaNormalClassDeclaration = @lhs.scalaNormalClassDeclaration -- ToDO annotation :: Annotation

                         lhs.scalaNormalInterfaceDeclaration =  @lhs.scalaNormalInterfaceDeclaration -- ToDo
    | ModifierPublic lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", False, False)], "", "", Nothing): @lhs.scalaFieldDeclaration)}

                     lhs.scalaNormalClassDeclaration = joinTypeModifier @lhs.scalaNormalClassDeclaration ("", False, False)

                     lhs.scalaNormalInterfaceDeclaration = joinTypeModifier @lhs.scalaNormalInterfaceDeclaration ("", False, False)
    | ModifierProtected lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("protected", False, False)], "", "", Nothing): @lhs.scalaFieldDeclaration)}

                        lhs.scalaNormalClassDeclaration = joinTypeModifier  @lhs.scalaNormalClassDeclaration  ("protected", False, False)

                        lhs.scalaNormalInterfaceDeclaration = joinTypeModifier @lhs.scalaNormalInterfaceDeclaration ("protected", False, False)
    | ModifierPrivate lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("private", False, False)], "", "", Nothing): @lhs.scalaFieldDeclaration)}

                      lhs.scalaNormalClassDeclaration = joinTypeModifier  @lhs.scalaNormalClassDeclaration ("private", False, False)

                      lhs.scalaNormalInterfaceDeclaration = joinTypeModifier @lhs.scalaNormalInterfaceDeclaration ("private", False, False)
    | ModifierAbstract lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", False, False)], "", "", Nothing): @lhs.scalaFieldDeclaration)} -- ToDO

                       lhs.scalaNormalClassDeclaration = joinTypeModifier  @lhs.scalaNormalClassDeclaration ("abstract", False, False)

                       lhs.scalaNormalInterfaceDeclaration = joinTypeModifier @lhs.scalaNormalInterfaceDeclaration ("abstract", False, False)
    | ModifiersStatic lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", True, False)], "", "", Nothing): @lhs.scalaFieldDeclaration)} -- ToDo

                      lhs.scalaNormalClassDeclaration = joinTypeModifier  @lhs.scalaNormalClassDeclaration ("", True, False)

                      lhs.scalaNormalInterfaceDeclaration = joinTypeModifier @lhs.scalaNormalInterfaceDeclaration ("", True, False)
    | ModifierFinal lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", False, True)], "", "", Nothing): @lhs.scalaFieldDeclaration)} -- ToDO

                    lhs.scalaNormalClassDeclaration = joinTypeModifier  @lhs.scalaNormalClassDeclaration ("final", False, True)

                    lhs.scalaNormalInterfaceDeclaration = joinTypeModifier @lhs.scalaNormalInterfaceDeclaration ("", False, True)
    | ModifierStrictfp lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", False, False)], "", "", Nothing): @lhs.scalaFieldDeclaration)} -- ToDO

                        lhs.scalaNormalClassDeclaration = joinTypeModifier  @lhs.scalaNormalClassDeclaration ("strfp", False, False)

                        lhs.scalaNormalInterfaceDeclaration = joinTypeModifier @lhs.scalaNormalInterfaceDeclaration ("strfp", False, False)
    | FieldModifierTransient lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("@transient", False, False)], "", "", Nothing): @lhs.scalaFieldDeclaration)} -- ToDO

                             lhs.scalaNormalClassDeclaration = @lhs.scalaNormalClassDeclaration

                             lhs.scalaNormalInterfaceDeclaration = @lhs.scalaNormalInterfaceDeclaration
    | FieldModifierVolatile lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("@volatile", False, False)], "", "", Nothing): @lhs.scalaFieldDeclaration)} -- ToDO

                            lhs.scalaNormalClassDeclaration = @lhs.scalaNormalClassDeclaration

                            lhs.scalaNormalInterfaceDeclaration = @lhs.scalaNormalInterfaceDeclaration
    | MethodModifierSynchronized lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", False, False)], "", "", Nothing): @lhs.scalaFieldDeclaration)} -- ToDO

                                 lhs.scalaNormalClassDeclaration = @lhs.scalaNormalClassDeclaration

                                 lhs.scalaNormalInterfaceDeclaration = @lhs.scalaNormalInterfaceDeclaration
    | MethodModifierNative lhs.scalaFieldDeclaration = {foldl concatenateModifiers [] (([("", False, False)], "", "", Nothing): @lhs.scalaFieldDeclaration)} -- ToDO

                           lhs.scalaNormalClassDeclaration = @lhs.scalaNormalClassDeclaration

                           lhs.scalaNormalInterfaceDeclaration = @lhs.scalaNormalInterfaceDeclaration

sem TypeParameters
    | TypeParametersC1 lhs.scalaTypeDeclaration = "[" ++ @typeParameterList.scalaTypeDeclaration ++ "]" -- ToDO check >>>
    | TypeParametersC2 lhs.scalaTypeDeclaration = "[" ++ @typeParameterList.scalaTypeDeclaration ++ "]" -- ToDO check >>
    | TypeParametersC3 lhs.scalaTypeDeclaration = "[" ++ @typeParameterList.scalaTypeDeclaration ++ "]" -- ToDO check >
    | TypeParametersC0 lhs.scalaTypeDeclaration = "[" ++ @typeParameterList.scalaTypeDeclaration ++ "]" -- ToDO
    | NilTypeParameters lhs.scalaTypeDeclaration = ""

{
commaTypeParameters :: String -> String -> String
commaTypeParameters hd "" = hd
commaTypeParameters hd tl = hd ++ ", " ++ tl
}

sem TypeParameterList
    | Cons lhs.scalaTypeDeclaration = commaTypeParameters @hd.scalaTypeDeclaration @tl.scalaTypeDeclaration
    | Nil lhs.scalaTypeDeclaration = ""

sem TypeParameter
    | TypeParameterBound lhs.scalaTypeDeclaration = @identifier ++ @typeBound.scalaTypeDeclaration
    | TypeParameter lhs.scalaTypeDeclaration = @identifier

{
typeBoundInterface :: String -> String
typeBoundInterface str = replace "<:" "with" str
}

sem TypeBound
    | TypeBound lhs.scalaTypeDeclaration =  " <: " ++ @classOrInterfaceType.scalaTypeDeclaration ++ (typeBoundInterface @typeBound.scalaTypeDeclaration)
    | NilAdditionalBoundList lhs.scalaTypeDeclaration = ""

sem ClassOrInterfaceType
    | ClassOrInterfaceType lhs.scalaTypeDeclaration =  @identifier ++ @zClassOrInterfaceType.scalaTypeDeclaration -- used in typeArguments of normal class ToDo @typeArguments.scalaTypeDeclaration ++
                           lhs.scalaSuperTypeDeclaration = " extends " ++ @identifier ++ @zClassOrInterfaceType.scalaSuperTypeDeclaration -- used in Super
                           lhs.scalaImplementsInterfaceTypeDeclaration = @identifier ++ @zClassOrInterfaceType.scalaImplementsInterfaceTypeDeclaration
                           lhs.scalaExtendInterface = " extends " ++ @identifier ++ @zClassOrInterfaceType.scalaExtendInterface
                           lhs.scalaExtendClassBodyNormalCD = " extends " ++ @identifier ++ @zClassOrInterfaceType.scalaExtendClassBodyNormalCD
                           lhs.scalaFieldDeclInitialization = @identifier ++ @zClassOrInterfaceType.scalaTypeDeclaration

sem ListInterfaceMemberDeclaration
    | Cons lhs.scalaExtendClassBodyNormalCD = @hd.scalaExtendClassBodyNormalCD ++ @tl.scalaExtendClassBodyNormalCD
           lhs.scalaBodyNormalInterface = @hd.scalaBodyNormalInterface ++ @tl.scalaBodyNormalInterface
           hd.scalaNTab = @lhs.scalaNTab
           tl.scalaNTab = @hd.scalaNTab
           lhs.scalaNTab = @tl.scalaNTab
    | Nil lhs.scalaExtendClassBodyNormalCD = ""
          lhs.scalaBodyNormalInterface = ""
          lhs.scalaNTab = @lhs.scalaNTab


sem ZClassOrInterfaceType
    | Cons lhs.scalaTypeDeclaration = @hd.scalaTypeDeclaration ++ @tl.scalaTypeDeclaration
           lhs.scalaSuperTypeDeclaration = "." ++ @hd.scalaSuperTypeDeclaration ++ @tl.scalaSuperTypeDeclaration
           lhs.scalaImplementsInterfaceTypeDeclaration = "." ++ @hd.scalaImplementsInterfaceTypeDeclaration ++ @tl.scalaImplementsInterfaceTypeDeclaration
           lhs.scalaExtendInterface =  "." ++ @hd.scalaExtendInterface ++ @tl.scalaExtendInterface
           lhs.scalaExtendClassBodyNormalCD = "." ++ @hd.scalaExtendClassBodyNormalCD ++ @tl.scalaExtendClassBodyNormalCD
           lhs.scalaFieldDeclInitialization = "." ++ @hd.scalaExtendInterface ++ @tl.scalaExtendInterface

    | Nil lhs.scalaTypeDeclaration = ""
          lhs.scalaSuperTypeDeclaration = ""
          lhs.scalaImplementsInterfaceTypeDeclaration = ""
          lhs.scalaExtendInterface = ""
          lhs.scalaExtendClassBodyNormalCD = ""
          lhs.scalaFieldDeclInitialization = ""

sem ZCOITTypeDeclSpecifier
    | ZCOITTypeDeclSpecifier lhs.scalaTypeDeclaration = @identifier -- ToDo ++ @typeArguments.scalaTypeDeclaration
                             lhs.scalaSuperTypeDeclaration = @identifier -- ToDo ++ @typeArguments.scalaTypeDeclaration
                             lhs.scalaImplementsInterfaceTypeDeclaration = @identifier
                             lhs.scalaExtendInterface = @identifier
                             lhs.scalaExtendClassBodyNormalCD = @identifier
                             lhs.scalaFieldDeclInitialization = @identifier

sem Super
    | Super lhs.scalaTypeDeclaration = @classOrInterfaceType.scalaSuperTypeDeclaration
    | NilSuper lhs.scalaTypeDeclaration = ""

sem Interfaces
    | Interfaces lhs.scalaTypeDeclaration = @interfaceTypeList.scalaImplementsInterfaceTypeDeclaration   -- ToDO interfaceTypeList :: InterfaceTypeList
    | NilInterfaces lhs.scalaTypeDeclaration = ""

sem InterfaceTypeList
    | Cons lhs.scalaImplementsInterfaceTypeDeclaration = " with " ++ @hd.scalaImplementsInterfaceTypeDeclaration ++ @tl.scalaImplementsInterfaceTypeDeclaration
    | Nil lhs.scalaImplementsInterfaceTypeDeclaration = ""

sem ClassBodyDeclarations
    | Cons
            --hd.scalaFieldDeclaration = []
            lhs.scalaTypeDeclaration = @hd.scalaTypeDeclaration ++ @tl.scalaTypeDeclaration
            hd.scalaNTab = @lhs.scalaNTab
            tl.scalaNTab = @hd.scalaNTab
            lhs.scalaNTab = @tl.scalaNTab
    | Nil
            lhs.scalaTypeDeclaration = ""
            lhs.scalaNTab = @lhs.scalaNTab

sem ReferenceTypeList
    | Cons  hd.scalaFieldDeclaration = []

{
checkVariableDeclarators :: [TypeFieldDeclaration] -> String -> String
checkVariableDeclarators [] _ = ""
checkVariableDeclarators ((modifiers, type_, variable, typeInitialization):xs)  nTab
            | elemStaticFinal modifiers = "\n" ++ nTab ++ (takeModifiers modifiers) ++ "val "  ++ variable ++
                ": " ++ (checkTypeInitialization typeInitialization type_) ++  (checkVariableDeclarators xs nTab)
            | elemStatic modifiers = "\n" ++ nTab ++ (takeModifiers modifiers) ++  "var "  ++ variable ++
                ": " ++ (checkTypeInitialization typeInitialization type_) ++  (checkVariableDeclarators xs nTab)
            | elemFinal modifiers = "\n" ++ nTab ++(takeModifiers modifiers) ++ "val "  ++ variable ++
                ": " ++ (checkTypeInitialization typeInitialization type_) ++  (checkVariableDeclarators xs nTab)
            | otherwise  = "\n" ++ nTab ++ (takeModifiers modifiers) ++ "var "  ++ variable ++
                ": " ++ (checkTypeInitialization typeInitialization type_) ++  (checkVariableDeclarators xs nTab)

checkTypeInitialization :: TypeFieldInitialization -> String -> String
checkTypeInitialization Nothing type_ = defaultValueType type_
checkTypeInitialization (Just initialization) type_ = type_ ++ " = " ++ initialization

elemStatic :: [TypeModifierIsStaticIsFinal] -> Bool
elemStatic [] = False
elemStatic ((_, True, _):modifiers) = True  || elemStatic modifiers
elemStatic (m:modifiers)            = False || elemStatic modifiers

elemFinal :: [TypeModifierIsStaticIsFinal] -> Bool
elemFinal [] = False
elemFinal ((_, _, True):modifiers) = True  || elemFinal modifiers
elemFinal (m:modifiers)            = False || elemFinal modifiers

elemStaticFinal :: [TypeModifierIsStaticIsFinal] -> Bool
elemStaticFinal modifiers = (elemStatic modifiers) && (elemFinal modifiers)

takeModifiers :: [TypeModifierIsStaticIsFinal] -> String
takeModifiers modifiers = foldl takeModifiers' "" modifiers
    where
        takeModifiers' s (fs, t1, t2) = if (fs == "") then s else s ++ fs ++ " "

defaultValueType :: String -> String
defaultValueType type_
            | type_ == "Byte"    = type_ ++ " = 0"
            | type_ == "Short"   = type_ ++ " = 0"
            | type_ == "Int"     = type_ ++ " = 0"
            | type_ == "Long"    = type_ ++ " = 0L"
            | type_ == "Float"   = type_ ++ " = 0"
            | type_ == "Double"  = type_ ++ " = 0.0"
            | type_ == "Char"    = type_ ++ " = \'\\u0000\'"
            | type_ == "Boolean" = type_ ++ " = false"
            | otherwise          = type_ ++ " = null"
}

sem ClassBodyDeclaration
    | ClassBodyDeclClassMemberDeclFieldDeclaration
                        modifiers.scalaFieldDeclaration = ([("", False, False)], "", "", Nothing) : [] -- ToDo
                        type_.scalaFieldDeclaration = @modifiers.scalaFieldDeclaration
                        variableDeclarators.scalaFieldDeclaration = @type_.scalaFieldDeclaration

                        lhs.scalaTypeDeclaration = {checkVariableDeclarators @variableDeclarators.scalaFieldDeclaration @variableDeclarators.scalaNTab}
                        variableDeclarators.scalaNTab = @lhs.scalaNTab
                        lhs.scalaNTab = @lhs.scalaNTab

                        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
                        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
    | ClassBodyDeclClassMemberDeclMethodDeclaration
                        modifiers.scalaFieldDeclaration = ([("", False, False)], "", "", Nothing) : [] -- ToDo
                        lhs.scalaTypeDeclaration = ""

                        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
                        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
                        methodBody.scalaNTab = @lhs.scalaNTab ++ "\t"
                        lhs.scalaNTab = @lhs.scalaNTab

    | ClassBodyDeclClassMemberDeclClassDeclarationNormalCD
                        -- lhs.scalaFieldDeclaration = []  -- ToDO              modifiers :: Modifiers

                        modifiers.scalaFieldDeclaration = ([("", False, False)], "", "", Nothing) : [] -- ToDo
                        modifiers.scalaNormalClassDeclaration = ("", False, False)
                        modifiers.scalaNormalInterfaceDeclaration = ("", False, False)
                        lhs.scalaNTab = @lhs.scalaNTab
                        classBodyDeclarations.scalaNTab = @lhs.scalaNTab ++ "\t"

                        lhs.scalaTypeDeclaration =
                            @lhs.scalaNTab ++
                            (normalClassDeclaration @modifiers.scalaNormalClassDeclaration @lhs.scalaNTab) ++
                            @identifier ++
                            @typeParameters.scalaTypeDeclaration ++ -- ToDo
                            @super.scalaTypeDeclaration ++
                            @interfaces.scalaTypeDeclaration ++
                            " {\n" ++ @classBodyDeclarations.scalaTypeDeclaration ++
                            "\n" ++ @lhs.scalaNTab ++ "}\n\n"

    | ClassBodyDeclClassMemberDeclClassDeclarationEnumD
                        --lhs.scalaFieldDeclaration = [] -- ToDO                 modifiers :: Modifiers
                        lhs.scalaTypeDeclaration = ""
                        modifiers.scalaFieldDeclaration = ([("", False, False)], "", "", Nothing) : [] -- ToDo

                        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
                        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo

                        enumBody.scalaNTab = @lhs.scalaNTab ++ "\t" -- ToDo, check
                        lhs.scalaNTab = @lhs.scalaNTab

    | ClassBodyDeclClassMemberDeclInterfaceDeclarationNormalInterfaceD
                        --lhs.scalaFieldDeclaration = [] -- ToDO modifiers :: Modifiers
                        modifiers.scalaFieldDeclaration = [] -- ToDo ?

                        modifiers.scalaNormalClassDeclaration = ("", False, False)
                        modifiers.scalaNormalInterfaceDeclaration = ("", False, False)
                        lhs.scalaNTab = @lhs.scalaNTab
                        listInterfaceMemberDeclaration.scalaNTab = @lhs.scalaNTab ++ "\t"

                        lhs.scalaTypeDeclaration =
                            @lhs.scalaNTab ++
                            (normalInterfaceDeclaration @modifiers.scalaNormalInterfaceDeclaration @lhs.scalaNTab) ++
                            @identifier ++
                            @typeParameters.scalaTypeDeclaration ++ --ToDo
                            @extendsInterfaces.scalaExtendInterface ++
                            " {\n" ++ @listInterfaceMemberDeclaration.scalaBodyNormalInterface ++
                            "\n" ++ @lhs.scalaNTab ++ "}\n\n"

    | ClassBodyDeclClassMemberDeclInterfaceDeclarationAnnotationTypeD
                        --lhs.scalaFieldDeclaration = [] -- ToDO modifiers :: Modifiers
                        modifiers.scalaFieldDeclaration = ([("", False, False)], "", "", Nothing) : [] -- ToDo
                        lhs.scalaTypeDeclaration = ""

                        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
                        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo

                        listAnnotationTypeElementDeclaration.scalaNTab = @lhs.scalaNTab
                        lhs.scalaNTab = @lhs.scalaNTab

    | ClassBodyDeclClassMemberDeclSemiColon
                        -- lhs.scalaFieldDeclaration = [] -- ToDO
                        lhs.scalaTypeDeclaration = ""
                        lhs.scalaNTab = @lhs.scalaNTab

    | ClassBodyInstanceInitializer
                        -- lhs.scalaFieldDeclaration = [] -- ToDO  blockStatements :: BlockStatements {- Block -- InstanceInitializer -}
                        lhs.scalaTypeDeclaration = ""
                        blockStatements.scalaNTab = @lhs.scalaNTab
                        lhs.scalaNTab = @lhs.scalaNTab

    | ClassBodyStaticInitializer
                        -- lhs.scalaFieldDeclaration = [] -- ToDO  blockStatements :: BlockStatements {- StaticInitializer -}
                        lhs.scalaTypeDeclaration = ""
                        blockStatements.scalaNTab = @lhs.scalaNTab
                        lhs.scalaNTab = @lhs.scalaNTab

    | ClassBodyConstructorDeclaration
                        --lhs.scalaFieldDeclaration = [] -- ToDO  modifiers :: Modifiers
                        modifiers.scalaFieldDeclaration = ([("", False, False)], "", "", Nothing) : [] -- ToDo
                        lhs.scalaTypeDeclaration = ""

                        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo

                        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
                        constructorBody.scalaNTab = @lhs.scalaNTab ++ "\t" -- ToDo, check if is correct
                        lhs.scalaNTab = @lhs.scalaNTab

    | ClassBodyConstructorDeclarationNoFormalParList
                        --lhs.scalaFieldDeclaration = [] -- ToDO  modifiers :: Modifiers
                        modifiers.scalaFieldDeclaration = ([("", False, False)], "", "", Nothing) : [] -- ToDo
                        lhs.scalaTypeDeclaration = ""

                        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
                        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
                        constructorBody.scalaNTab = @lhs.scalaNTab ++ "\t" -- ToDo , check if is correct.
                        lhs.scalaNTab = @lhs.scalaNTab

sem Type  -- ToDo check
    | TypePrimitiveType lhs.scalaFieldDeclaration = @primitiveOrReferenceType.scalaFieldDeclaration
                        -- lhs.scalaFieldDeclInitialization = @primitiveOrReferenceType.scalaFieldDeclInitialization

{
addTypeToModifiers :: String -> TypeFieldDeclaration -> TypeFieldDeclaration
addTypeToModifiers type_ (modifiers, t, variableDeclarators, ti)  = (modifiers, type_, variableDeclarators, ti)
}

sem PrimitiveOrReferenceType
    | TypePrimitiveNumericType_TypeIntegral_Byte
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Byte") @lhs.scalaFieldDeclaration
                                -- lhs.scalaFieldDeclInitialization = "Byte"
    | TypePrimitiveNumericType_TypeIntegral_Short
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Short") @lhs.scalaFieldDeclaration -- ToDo
                                -- lhs.scalaFieldDeclInitialization = "Short"
    | TypePrimitiveNumericType_TypeIntegral_Int
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Int") @lhs.scalaFieldDeclaration -- ToDo
                                -- lhs.scalaFieldDeclInitialization = "Int"
    | TypePrimitiveNumericType_TypeIntegral_Long
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Long") @lhs.scalaFieldDeclaration -- ToDo
                                -- lhs.scalaFieldDeclInitialization = "Long"
    | TypePrimitiveNumericType_TypeIntegral_Char
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Char") @lhs.scalaFieldDeclaration -- ToDo
                                -- lhs.scalaFieldDeclInitialization = "Char"
    | TypePrimitiveNumericType_TypeFloating_Float
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Float") @lhs.scalaFieldDeclaration -- ToDo
                                -- lhs.scalaFieldDeclInitialization = "Float"
    | TypePrimitiveNumericType_TypeFloating_Double
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Double") @lhs.scalaFieldDeclaration -- ToDo
                                -- lhs.scalaFieldDeclInitialization = "Double"
    | TypePrimitivePrimitivetypeBoolean
                                lhs.scalaFieldDeclaration = map (addTypeToModifiers "Boolean") @lhs.scalaFieldDeclaration -- ToDo
                                -- lhs.scalaFieldDeclInitialization = "Boolean"
    | TypeReference
                                lhs.scalaFieldDeclaration = @referenceType.scalaFieldDeclaration
                                -- map (addTypeToModifiers @referenceType.scalaFieldDeclInitialization) @lhs.scalaFieldDeclaration
                                -- lhs.scalaFieldDeclInitialization = ""

sem ReferenceType
    | ReferenceTypeClassOrInterfaceType  lhs.scalaFieldDeclaration =  map (addTypeToModifiers (@identifier ++ @zClassOrInterfaceType.scalaFieldDeclInitialization)) @lhs.scalaFieldDeclaration -- ToDo
                                        -- ToDO typeArguments :: TypeArguments
sem VariableDeclarators
    | Cons lhs.scalaFieldDeclaration = @hd.scalaFieldDeclaration ++ @tl.scalaFieldDeclaration
           hd.scalaNTab = @lhs.scalaNTab
           tl.scalaNTab = @lhs.scalaNTab
           lhs.scalaNTab = @hd.scalaNTab
    | Nil  lhs.scalaFieldDeclaration  = []
           lhs.scalaNTab = @lhs.scalaNTab

{
addTypeDeclInitialization :: [TypeFieldDeclaration] -> String -> [TypeFieldDeclaration]
addTypeDeclInitialization  [] typeInitialization  = []

addTypeDeclInitialization  ((modifiers, t, variableDeclarators, _):xs) typeInitialization  =
    (modifiers, t, variableDeclarators, (Just typeInitialization)) : addTypeDeclInitialization xs typeInitialization
}
sem VariableDeclarator
    | VariableDeclaratorId
            lhs.scalaFieldDeclaration = @variableDeclaratorId.scalaFieldDeclaration
    | VariableDeclaratorIdAsig
            lhs.scalaFieldDeclaration =
                addTypeDeclInitialization @variableDeclaratorId.scalaFieldDeclaration @variableInitializer.scalaFieldDeclInitialization

sem VariableInitializer
    | VariableInitializerExp
            lhs.scalaFieldDeclInitialization = @expression.scalaFieldDeclInitialization
    | VariableInitializerArr
            lhs.scalaFieldDeclInitialization = ""
            -- attayInitializer :: ArrayInitializer ToDo

sem ArgumentList
    | Cons
        lhs.scalaFieldDeclInitialization = {
            if @tl.scalaFieldDeclInitialization == "" then
                @hd.scalaFieldDeclInitialization
            else
                @hd.scalaFieldDeclInitialization ++ "," ++ @tl.scalaFieldDeclInitialization
        } -- ToDo
    | Nil
        lhs.scalaFieldDeclInitialization = ""

sem Expression
    | ExpressionConditionalExpr
            lhs.scalaFieldDeclInitialization = @conditionalOrExpression.scalaFieldDeclInitialization
    | ExpressionConditionalExprComb
            lhs.scalaFieldDeclInitialization = @conditionalOrExpression1.scalaFieldDeclInitialization ++
                                                @expression.scalaFieldDeclInitialization
                                                -- @conditionalExpression2.scalaFieldDeclInitialization  -- ToDo, check if is correct
    | ExpressionAssignment
            lhs.scalaFieldDeclInitialization = "" -- ToDo
                        -- conditionalOrExpression assignmentOperator :: AssignmentOperator expression :: Expression

sem ConditionalOrExpression
    | Mod -- :%:
        lhs.scalaFieldDeclInitialization =
            @conditionalOrExpression1.scalaFieldDeclInitialization ++ " " ++
            @conditionalOrExpression2.scalaFieldDeclInitialization -- ToDo check
    | Or -- :||:
        lhs.scalaFieldDeclInitialization =
                @conditionalOrExpression1.scalaFieldDeclInitialization ++ " " ++
                @conditionalOrExpression2.scalaFieldDeclInitialization -- ToDo check
    | And -- :&&:
        lhs.scalaFieldDeclInitialization =
                @conditionalOrExpression1.scalaFieldDeclInitialization ++ " " ++
                @conditionalOrExpression2.scalaFieldDeclInitialization -- ToDo check
    | BitwiseOr  -- :|:
        lhs.scalaFieldDeclInitialization =
                @conditionalOrExpression1.scalaFieldDeclInitialization ++ " " ++
                @conditionalOrExpression2.scalaFieldDeclInitialization -- ToDo check
    | BitwiseXor -- :^:
        lhs.scalaFieldDeclInitialization =
                @conditionalOrExpression1.scalaFieldDeclInitialization ++ " " ++
                @conditionalOrExpression2.scalaFieldDeclInitialization -- ToDo check
    | BitwiseAnd -- :&:
        lhs.scalaFieldDeclInitialization =
                @conditionalOrExpression1.scalaFieldDeclInitialization ++ " " ++
                @conditionalOrExpression2.scalaFieldDeclInitialization -- ToDo check
    | EqualTo -- :==:
        lhs.scalaFieldDeclInitialization =
                @conditionalOrExpression1.scalaFieldDeclInitialization ++ " " ++
                @conditionalOrExpression2.scalaFieldDeclInitialization -- ToDo check
    | NotEqualTo -- :!=:
        lhs.scalaFieldDeclInitialization =
                @conditionalOrExpression1.scalaFieldDeclInitialization ++ " " ++
                @conditionalOrExpression2.scalaFieldDeclInitialization -- ToDo check
    | LessThan -- :<:
        lhs.scalaFieldDeclInitialization =
                @conditionalOrExpression1.scalaFieldDeclInitialization ++ " " ++
                @conditionalOrExpression2.scalaFieldDeclInitialization -- ToDo check
    | GreaterThan -- :>:
        lhs.scalaFieldDeclInitialization =
                @conditionalOrExpression1.scalaFieldDeclInitialization ++ " " ++
                @conditionalOrExpression2.scalaFieldDeclInitialization -- ToDo check
    | LessThanOrEqualTo -- :<=:
        lhs.scalaFieldDeclInitialization =
                @conditionalOrExpression1.scalaFieldDeclInitialization ++ " " ++
                @conditionalOrExpression2.scalaFieldDeclInitialization -- ToDo check
    | GreaterThanOrEqualTo -- :>=:
        lhs.scalaFieldDeclInitialization =
                @conditionalOrExpression1.scalaFieldDeclInitialization ++ " " ++
                @conditionalOrExpression2.scalaFieldDeclInitialization -- ToDo check
    | LeftShift -- :<<:
        lhs.scalaFieldDeclInitialization =
                @conditionalOrExpression1.scalaFieldDeclInitialization ++ " " ++
                @conditionalOrExpression2.scalaFieldDeclInitialization -- ToDo check
    | RightShift -- :>>:
        lhs.scalaFieldDeclInitialization =
                @conditionalOrExpression1.scalaFieldDeclInitialization ++ " " ++
                @conditionalOrExpression2.scalaFieldDeclInitialization -- ToDo check
    | ZeroFillRightShift -- :>>>:
        lhs.scalaFieldDeclInitialization =
                @conditionalOrExpression1.scalaFieldDeclInitialization ++ " " ++
                @conditionalOrExpression2.scalaFieldDeclInitialization -- ToDo check
    | Add -- :+:
        lhs.scalaFieldDeclInitialization =
                @conditionalOrExpression1.scalaFieldDeclInitialization ++ " " ++
                @conditionalOrExpression2.scalaFieldDeclInitialization -- ToDo check
    | Sub -- :-:
        lhs.scalaFieldDeclInitialization =
                @conditionalOrExpression1.scalaFieldDeclInitialization ++ " " ++
                @conditionalOrExpression2.scalaFieldDeclInitialization -- ToDo check
    | Mult -- :*:
        lhs.scalaFieldDeclInitialization =
                @conditionalOrExpression1.scalaFieldDeclInitialization ++ " " ++
                @conditionalOrExpression2.scalaFieldDeclInitialization -- ToDo check
    | Div -- :/:
        lhs.scalaFieldDeclInitialization =
                @conditionalOrExpression1.scalaFieldDeclInitialization ++ " " ++
                @conditionalOrExpression2.scalaFieldDeclInitialization -- ToDo check
    | ConditionalOrExpressionUnaryExpression
            lhs.scalaFieldDeclInitialization = @unaryExpression.scalaFieldDeclInitialization -- ToDo check
    | ConditionalOrExpressionIntanceOf
            lhs.scalaFieldDeclInitialization = @unaryExpression.scalaFieldDeclInitialization -- ToDo check  type_ :: Type

sem UnaryExpression
    | UnaryExpressionPreIncrementExpression
            lhs.scalaFieldDeclInitialization =  @unaryExpression.scalaFieldDeclInitialization --ToDo
    | UnaryExpressionPreDecrementExpression
            lhs.scalaFieldDeclInitialization =  @unaryExpression.scalaFieldDeclInitialization --ToDo
    | UnExpMas
            lhs.scalaFieldDeclInitialization =  @unaryExpression.scalaFieldDeclInitialization --ToDo
    | UnExpMenos
            lhs.scalaFieldDeclInitialization =  @unaryExpression.scalaFieldDeclInitialization --ToDo
    | PostExpPrimaryPostfixZ
            lhs.scalaFieldDeclInitialization =  @primary.scalaFieldDeclInitialization --ToDo
            -- zpostfixExpression :: ZPostfixExpression
    | PostfixExpressionPrimary
            lhs.scalaFieldDeclInitialization = @primary.scalaFieldDeclInitialization
    | Pestan
            lhs.scalaFieldDeclInitialization =  @unaryExpression.scalaFieldDeclInitialization -- ToDo
    | Admiracion
            lhs.scalaFieldDeclInitialization =  @unaryExpression.scalaFieldDeclInitialization -- ToDo

sem Primary
    | PrimNoNewArray
            lhs.scalaFieldDeclInitialization = @primaryNoNewArray.scalaFieldDeclInitialization
    | PrimNoNewArrayZ
            lhs.scalaFieldDeclInitialization = @primaryNoNewArray.scalaFieldDeclInitialization
                            -- @zprimary.scalaFieldDeclInitialization  --ToDo, check

sem PrimaryNoNewArray
    | PrimaryNoNewArray
                lhs.scalaFieldDeclInitialization = @primarynna.scalaFieldDeclInitialization
                        -- ToDO zPrimaryNoNewArray :: ZPrimaryNoNewArray
sem PrimaryNNA
    | PrimNNALiteral_IntegerLiteral_DecimalIntegerLiteral
                        lhs.scalaFieldDeclInitialization = @string
    | PrimNNALiteral_IntegerLiteral_HexIntegerLiteral
                        lhs.scalaFieldDeclInitialization = @string
    | PrimNNALiteral_IntegerLiteral_OctalIntegerLiteral
                        lhs.scalaFieldDeclInitialization = @string
    | PrimNNALiteral_FloatingPointLiteral_DecimalFloatingPointLiteral
                        lhs.scalaFieldDeclInitialization = @string
    | PrimNNALiteral_FloatingPointLiteral_HexadecimalFloatingPointLiteral
                        lhs.scalaFieldDeclInitialization = @string
    | PrimNNALiteral_BooleanLiteral
                        lhs.scalaFieldDeclInitialization = { if @bool then "True" else "False" }
    | PrimNNALiteral_CharacterLiteral
                        lhs.scalaFieldDeclInitialization = @string  -- ToDo revisar
    | PrimNNALiteral_StringLiteral
                        lhs.scalaFieldDeclInitialization = @string
    | PrimNNALiteral_NullLiteral
                        lhs.scalaFieldDeclInitialization = "null" -- ToDo revisar
    | PrimNNATypeClassPrimitiveType lhs.scalaFieldDeclInitialization = "" -- ToDo analizar si caso entra.
                        -- primitiveType :: PrimitiveType typeZ :: TypeZ
    | PrimNNATypeClassReferenceTypeClassIOT
                        lhs.scalaFieldDeclInitialization = @identifier -- ToDo revisar y analizar caso.
                        -- identifier :: Identifier typeArguments :: TypeArguments primNNAClassOrInterfaceType :: PrimNNAClassOrInterfaceType
    | PrimNNATypeClassReferenceTypeTypeVariable
                        lhs.scalaFieldDeclInitialization = @identifier -- ToDo revisar caso
                        -- identifier :: Identifier typeZ :: TypeZ
    | PrimNNAVoid
                        lhs.scalaFieldDeclInitialization = "Unit" -- ToDo check caso
    | PrimNNAThis
                        lhs.scalaFieldDeclInitialization = "this???" -- ToDO check caso
    | PrimNNAClassName
                        lhs.scalaFieldDeclInitialization = @typeName.scalaFieldDeclInitialization -- ToDo check
    | PrimNNAParExp
                        lhs.scalaFieldDeclInitialization = @expression.scalaFieldDeclInitialization
    | UnNotPlusCastExpression
                        lhs.scalaFieldDeclInitialization = "" -- ToDo
                        -- expression :: Expression unaryExpression :: UnaryExpression {- ANTES Type        UnaryExpression  -- CONTROLAR COND CONTEXTO -}

    | PrimNNAClassInstanceCreationExpression
                        lhs.scalaFieldDeclInitialization = " new " ++ @classOrInterfaceType.scalaFieldDeclInitialization ++ "(" ++ @argumentList.scalaFieldDeclInitialization ++ ")"  -- ToDo
                        -- typeArguments :: TypeArguments classOrInterfaceType :: ClassOrInterfaceType argumentList :: ArgumentList  {- Antes ->                           | PrimNNAClassIns ClassInstanceCreationExpression -}
    | ArrayCreationExpressionPrimitiveType
                        lhs.scalaFieldDeclInitialization = "" -- ToDo
                        -- primitiveType :: PrimitiveType dimExprs :: DimExprs                      {- Dims -- ARRAYCreationExpression Aplicar Cond Contexto -}
    | ArrayCreationExpressionClassOrInterf
                        lhs.scalaFieldDeclInitialization = "" -- ToDo
                        -- classOrInterfaceType :: ClassOrInterfaceType dimExprs :: DimExprs               {-- Dims -- ARRAYCreationExpression Aplicar Cond Contexto -}
    | ArrayCreationExpressionArrInitialPrim
                        lhs.scalaFieldDeclInitialization = "" -- ToDo
                        -- primitiveType :: PrimitiveType dims :: Dims arrayInitilizer :: ArrayInitializer          {-- ARRAYCreationExpression Aplicar Cond Contexto -}
    | ArrayCreationExpressionArrInitialClass
                        lhs.scalaFieldDeclInitialization = "" -- ToDo
                        -- classOrInterfaceType :: ClassOrInterfaceType dims :: Dims arrayInitializer :: ArrayInitializer  {-- ARRAYCreationExpression Aplicar Cond Contexto -}
    | PrimNNAFieldAccessPrim
                        lhs.scalaFieldDeclInitialization = "" -- ToDo
                        -- primary :: Primary identifier :: Identifier
    | PrimNNAFieldAccessSuper
                        lhs.scalaFieldDeclInitialization = @identifier -- ToDo
    | PrimNNAFieldAccessClassName
                        lhs.scalaFieldDeclInitialization =  @typeName.scalaFieldDeclInitialization ++ @identifier {-- Antes Identifier -}
                        -- ToDo
    | PrimNNAMethodInvocationMN
                        lhs.scalaFieldDeclInitialization = "" -- ToDo
                        -- typeName :: TypeName argumentList :: ArgumentList  {-- Antes MethodName -}
    | PrimNNAMethodInvocationSuper
                        lhs.scalaFieldDeclInitialization = "" -- ToDo
                        -- nonWildTypeArguments :: NonWildTypeArguments identifier :: Identifier argumentList :: ArgumentList
    | PrimNNAMethodInvocationClassN
                        lhs.scalaFieldDeclInitialization = "" -- ToDo
                        -- typeName :: TypeName nonWildTypeArguments :: NonWildTypeArguments identifier :: Identifier argumentList :: ArgumentList  {- TypeNAme ANtes Identifier CONTROLAR EN COND CONTEXTO -}
    | PrimNNAMethodInvocationTypeN
                        lhs.scalaFieldDeclInitialization = "" -- ToDo
                        -- typeName :: TypeName nonWildTypeArguments :: NonWildTypeArguments identifier :: Identifier argumentList :: ArgumentList
    | PrimNNAArrayAccessExprName
                        lhs.scalaFieldDeclInitialization = @typeName.scalaFieldDeclInitialization ++ @expression.scalaFieldDeclInitialization  -- ToDo
                        -- typeName :: TypeName expression :: Expression  {-- Antes ExpressionName -}
    | PostfixExpressionExpressionName
                        lhs.scalaFieldDeclInitialization = @typeName.scalaFieldDeclInitialization

sem VariableDeclaratorId
    | VarDeclaratorId
        lhs.scalaFieldDeclaration = {
            foldl (\x (fs, tp, _, _) -> ((fs, tp, @identifier, Nothing): x))
            ([]::[TypeFieldDeclaration]) @lhs.scalaFieldDeclaration }
        lhs.scalaNTab= @lhs.scalaNTab ++ "\t" -- ToDo Check
    | VarDeclaratorIdVDZ
        lhs.scalaFieldDeclaration = {
            (foldl (\x (fs, tp, _, _) -> ((fs, tp, @identifier, Nothing): x))
            ([]::[TypeFieldDeclaration]) @lhs.scalaFieldDeclaration) ++
            @variableDeclaratorIdZ.scalaFieldDeclaration
        }
        lhs.scalaNTab = @lhs.scalaNTab ++ "\t" -- ToDo Check

sem ResultType
    | ResultTypeType type_.scalaFieldDeclaration = []

sem FormalParameterList
    | FormalParameterListFormal
                                type_.scalaFieldDeclaration = []
                                variableDeclaratorId.scalaFieldDeclaration = []
                                variableDeclaratorId.scalaNTab = ""

    | FormalParameterListLast
                                type_.scalaFieldDeclaration = []
                                variableDeclaratorId.scalaFieldDeclaration = []
                                variableDeclaratorId.scalaNTab = ""

sem ForStatement
    | ForStatementEnhancedForStatementNoVarModif type_.scalaFieldDeclaration = []
    | ForStatementEnhancedForStatement type_.scalaFieldDeclaration = []

sem ForInit
    | ForInitLocalVar
        type_.scalaFieldDeclaration = []
        variableDeclarators.scalaNTab = ""

sem WildcardBounds
    | WilcardBoundsExtendsReferenceType type_.scalaFieldDeclaration = []
    | WilcardBoundsSuperReferenceType type_.scalaFieldDeclaration = []

sem InterfaceMemberDeclaration
    | InterfaceMemberDeclarationConstant
        modifiers.scalaFieldDeclaration = []
        type_.scalaFieldDeclaration = []
        variableDeclarators.scalaFieldDeclaration = []
        variableDeclarators.scalaNTab = ""

        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        lhs.scalaTypeDeclaration = ""
        lhs.scalaBodyNormalInterface = ""
        lhs.scalaExtendClassBodyNormalCD = ""

        lhs.scalaNTab = @lhs.scalaNTab
    | InterfaceMemberDeclarationAbstract
        modifiers.scalaFieldDeclaration = []

        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        lhs.scalaTypeDeclaration = ""
        lhs.scalaBodyNormalInterface = ""
        lhs.scalaExtendClassBodyNormalCD = ""

        lhs.scalaNTab = @lhs.scalaNTab
    | InterfaceMemberDeclTypeDeclarationClassDeclarationNormalCD
        modifiers.scalaFieldDeclaration = []
        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        classBodyDeclarations.scalaNTab = @lhs.scalaNTab ++ "\t"
        lhs.scalaNTab = @lhs.scalaNTab

        lhs.scalaTypeDeclaration =
            @lhs.scalaNTab ++
            (normalClassDeclaration @modifiers.scalaNormalClassDeclaration @lhs.scalaNTab) ++
            @identifier ++
            @typeParameters.scalaTypeDeclaration ++
            @super.scalaTypeDeclaration ++
            @interfaces.scalaTypeDeclaration ++
            " { \n" ++ @classBodyDeclarations.scalaTypeDeclaration ++ @lhs.scalaNTab ++ "}\n\n"

        lhs.scalaBodyNormalInterface = ""
        lhs.scalaExtendClassBodyNormalCD = ""

    | InterfaceMemberDeclTypeDeclarationClassDeclarationEnumD
        modifiers.scalaFieldDeclaration = []
        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        lhs.scalaTypeDeclaration = ""
        lhs.scalaBodyNormalInterface = ""
        lhs.scalaExtendClassBodyNormalCD = ""
        lhs.scalaNTab = @lhs.scalaNTab
        enumBody.scalaNTab = @lhs.scalaNTab ++ "\t"

    | InterfaceMemberDeclTypeDeclarationInterfaceDeclarationNormalInterfaceD
        modifiers.scalaFieldDeclaration = []
        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        listInterfaceMemberDeclaration.scalaNTab = @lhs.scalaNTab ++ "\t"

        lhs.scalaBodyNormalInterface =
            @lhs.scalaNTab ++
            (normalInterfaceDeclaration @modifiers.scalaNormalInterfaceDeclaration @lhs.scalaNTab) ++
            @identifier ++
            @typeParameters.scalaTypeDeclaration ++ --ToDo
            @extendsInterfaces.scalaExtendInterface ++
            " {\n" ++ @listInterfaceMemberDeclaration.scalaBodyNormalInterface ++ @lhs.scalaNTab ++  "}\n\n"

        lhs.scalaTypeDeclaration = ""
        lhs.scalaExtendClassBodyNormalCD = ""
        lhs.scalaNTab = @lhs.scalaNTab
    | InterfaceMemberDeclTypeDeclarationInterfaceDeclarationAnnotationTypeD
        modifiers.scalaFieldDeclaration = []
        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        lhs.scalaTypeDeclaration = ""
        lhs.scalaBodyNormalInterface = ""
        lhs.scalaExtendClassBodyNormalCD = ""
        listAnnotationTypeElementDeclaration.scalaNTab = @lhs.scalaNTab
        lhs.scalaNTab = @lhs.scalaNTab
    | InterfaceMemberDeclTypeDeclarationSemiColon
        lhs.scalaTypeDeclaration = ""
        lhs.scalaBodyNormalInterface = ""
        lhs.scalaExtendClassBodyNormalCD = ""
        lhs.scalaNTab = @lhs.scalaNTab

sem ConditionalOrExpression
    | ConditionalOrExpressionIntanceOf
            type_.scalaFieldDeclaration = []


sem Catches
    | Cons hd.scalaNTab = @lhs.scalaNTab
           tl.scalaNTab = @hd.scalaNTab
           lhs.scalaNTab = @tl.scalaNTab
    | Nil lhs.scalaNTab = @lhs.scalaNTab

sem CatchClause
    | CatchClause
        type_.scalaFieldDeclaration = []
        variableDeclaratorId.scalaNTab = ""
        blockStatements.scalaNTab = @lhs.scalaNTab
        lhs.scalaNTab = @lhs.scalaNTab

sem BlockStatements
    | Cons hd.scalaNTab = @lhs.scalaNTab
           tl.scalaNTab = @hd.scalaNTab
           lhs.scalaNTab = @tl.scalaNTab
    | Nil lhs.scalaNTab = @lhs.scalaNTab

sem BlockStatement
    | BlockStatementLocalVariableDeclarationStatement
        modifiers.scalaFieldDeclaration = [] -- ToDo
        type_.scalaFieldDeclaration = [] -- ToDo
        variableDeclarators.scalaNTab = ""

        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo

        lhs.scalaNTab = @lhs.scalaNTab
    | BlockStatementClassDeclarationNormalClassDeclaration
        modifiers.scalaFieldDeclaration = [] -- ToDo
        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        classBodyDeclarations.scalaNTab = @lhs.scalaNTab ++ "\n"
        lhs.scalaNTab = @lhs.scalaNTab
    | BlockStatementClassDeclarationEnumDeclaration
        modifiers.scalaFieldDeclaration = [] -- ToDo

        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        enumBody.scalaNTab = @lhs.scalaNTab ++ "\t"
        lhs.scalaNTab = @lhs.scalaNTab

sem Statement
    | StatementLabeled
                       statement.scalaNTab = @lhs.scalaNTab
                       lhs.scalaNTab = @statement.scalaNTab

    | StatementIf
                        statement.scalaNTab = @lhs.scalaNTab
                        lhs.scalaNTab = @statement.scalaNTab

    | StatementIfElse
                      statement1.scalaNTab = @lhs.scalaNTab
                      statement2.scalaNTab = @lhs.scalaNTab
                      lhs.scalaNTab = @statement2.scalaNTab

    | StatementWhile
                     statement.scalaNTab = @lhs.scalaNTab
                     lhs.scalaNTab = @statement.scalaNTab

    | StatementFor
                    forStatement.scalaNTab = @lhs.scalaNTab -- ToDo
                    lhs.scalaNTab = @lhs.scalaNTab

    | SWTSBlock
                    blockStatement.scalaNTab = @lhs.scalaNTab
                    lhs.scalaNTab = @blockStatement.scalaNTab

    | SWTSEmptyStatement
                    lhs.scalaNTab = @lhs.scalaNTab

    | SWTSExpressionStatement
                    lhs.scalaNTab = @lhs.scalaNTab

    | SWTSAssertStatementCond
                    lhs.scalaNTab = @lhs.scalaNTab

    | SWTSAssertStatementCondEx
                    lhs.scalaNTab = @lhs.scalaNTab

    | SWTSSwitchStatement
                    lhs.scalaNTab = @lhs.scalaNTab

    | SWTSDoStatement
                    lhs.scalaNTab = @lhs.scalaNTab

    | SWTSBreakStatement
                    lhs.scalaNTab = @lhs.scalaNTab

    | SWTSBreakStatementId
                    lhs.scalaNTab = @lhs.scalaNTab

    | SWTSNilContinueStatement
                    lhs.scalaNTab = @lhs.scalaNTab

    | SWTSContinueStatement
                    lhs.scalaNTab = @lhs.scalaNTab

    | SWTSReturnStatement
                    lhs.scalaNTab = @lhs.scalaNTab

    | SWTSNilReturnStatement
                    lhs.scalaNTab = @lhs.scalaNTab

    | SWTSynchronizedStatement
                    blockStatements.scalaNTab = @lhs.scalaNTab
                    lhs.scalaNTab = @blockStatements.scalaNTab

    | SWTTrhowStatement
                    lhs.scalaNTab = @lhs.scalaNTab

    | SWTTryStatement
                    blockStatements.scalaNTab = @lhs.scalaNTab
                    catches.scalaNTab = @lhs.scalaNTab
                    lhs.scalaNTab = @blockStatements.scalaNTab

    | SWTTryStatementFinally
                    blockStatements1.scalaNTab = @lhs.scalaNTab
                    catches.scalaNTab = @blockStatements1.scalaNTab
                    blockStatements2.scalaNTab = @catches.scalaNTab
                    lhs.scalaNTab = @blockStatements2.scalaNTab

sem SwitchBlock
    | SwitchBlockAll
                    switchBlockStatementGrooups.scalaNTab = @lhs.scalaNTab ++ "\t" -- ToDo , check if is correct.
                    lhs.scalaNTab = @lhs.scalaNTab
    | SwitchBlockLabels
                    lhs.scalaNTab = @lhs.scalaNTab
    | SwitchBlockGroups
                    switchBlockStatementGroups.scalaNTab = @lhs.scalaNTab ++ "\t" --ToDo check if is correct.
                    lhs.scalaNTab = @lhs.scalaNTab
    | NilSwitchBlock
                    lhs.scalaNTab = @lhs.scalaNTab

sem SwitchBlockStatementGroups
    | Cons hd.scalaNTab = @lhs.scalaNTab
           tl.scalaNTab = @hd.scalaNTab
           lhs.scalaNTab = @tl.scalaNTab
    | Nil lhs.scalaNTab = @lhs.scalaNTab

sem SwitchBlockStatementGroup
    | SwitchBlockStatementGroup blockStatements.scalaNTab = @lhs.scalaNTab ++ "\t"

sem ArrayInitializer
    | ArrayInitializer
        variableInitializers.scalaFieldDeclaration = [] -- ToDo
        variableInitializers.scalaNTab = "" -- ToDo

sem ListAnnotationTypeElementDeclaration
    | Cons hd.scalaNTab = @lhs.scalaNTab
           tl.scalaNTab = @hd.scalaNTab
           lhs.scalaNTab = @tl.scalaNTab
    | Nil lhs.scalaNTab = @lhs.scalaNTab

sem AnnotationTypeElementDeclaration
    | AnnTypeElemDeclAbstract
        modifiers.scalaFieldDeclaration = [] -- ToDo
        type_.scalaFieldDeclaration = [] -- ToDo

        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        lhs.scalaNTab = @lhs.scalaNTab

    | AnnTypeElemDeclConstant
        modifiers.scalaFieldDeclaration = [] -- ToDo
        type_.scalaFieldDeclaration = [] -- ToDo
        variableDeclarators.scalaNTab = "" -- ToDo check if is neccesary for parent

        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        lhs.scalaNTab = @lhs.scalaNTab
    | AnnTypeElemDeclTypeDeclarationClassDeclarationNormalCD
        modifiers.scalaFieldDeclaration = [] -- ToDo
        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        classBodyDeclarations.scalaNTab = @lhs.scalaNTab ++ "\t" -- ToDo, check
        lhs.scalaNTab = @lhs.scalaNTab

    | AnnTypeElemDeclTypeDeclarationClassDeclarationEnumD
        modifiers.scalaFieldDeclaration = [] -- ToDo

        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        enumBody.scalaNTab = @lhs.scalaNTab --ToDo
        lhs.scalaNTab = @lhs.scalaNTab
    | AnnTypeElemDeclTypeDeclarationInterfaceDeclarationNormalInterfaceD
        modifiers.scalaFieldDeclaration = [] -- ToDo

        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo
        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo

        listInterfaceMemberDeclaration.scalaNTab = @lhs.scalaNTab -- ToDo
        lhs.scalaNTab = @lhs.scalaNTab
    | AnnTypeElemDeclTypeDeclarationInterfaceDeclarationAnnotationTypeD
        modifiers.scalaFieldDeclaration = [] -- ToDo

        modifiers.scalaNormalClassDeclaration = ("", False, False) -- ToDo

        modifiers.scalaNormalInterfaceDeclaration = ("", False, False) -- ToDo
        listAnnotationsTypeElementDeclaration.scalaNTab = @lhs.scalaNTab
        lhs.scalaNTab = @lhs.scalaNTab

sem ActualTypeArgument
    | ActualTypeReferenceType type_.scalaFieldDeclaration = [] -- ToDo

sem EnumBody
    | EnumBody enumConstants.scalaNTab = @lhs.scalaNTab
               enumBodyDeclarations.scalaNTab = @enumConstants.scalaNTab
               lhs.scalaNTab = @enumBodyDeclarations.scalaNTab

sem EnumBodyDeclarations
    | EnumBodyDeclarations classBodyDeclarations.scalaNTab = @lhs.scalaNTab -- ToDo check
                           lhs.scalaNTab = @lhs.scalaNTab

sem EnumConstants
    | EnumConstants enumConstant.scalaNTab = @lhs.scalaNTab
                    enumConstants.scalaNTab = @enumConstant.scalaNTab
                    lhs.scalaNTab = @enumConstants.scalaNTab
    | NilEnumConstants lhs.scalaNTab = @lhs.scalaNTab

sem EnumConstant
    | EnumConstantAll classBodyDeclarations.scalaNTab = @lhs.scalaNTab
                      lhs.scalaNTab = @lhs.scalaNTab
    | EnumConstantClasB classBodyDeclaratiosn.scalaNTab = @lhs.scalaNTab
                         lhs.scalaNTab = @lhs.scalaNTab

sem MethodBody
    | MethodBodyBlock
                        blokStatements.scalaNTab = @lhs.scalaNTab
                        lhs.scalaNTab = @lhs.scalaNTab
    | MethodBodySemiColon
                        lhs.scalaNTab = @lhs.scalaNTab

sem ConstructorBody
    | ConstructorBody
                      blockStatements.scalaNTab = @lhs.scalaNTab
                      lhs.scalaNTab = @blockStatements.scalaNTab

sem ForStatement
    | ForStatementBasicForStatementAll      statement.scalaNTab = @lhs.scalaNTab
                                            lhs.scalaNTab = @statement.scalaNTab

    | ForStatementBasicForStatementNoExp    statement.scalaNTab = @lhs.scalaNTab
                                            lhs.scalaNTab = @statement.scalaNTab

    | ForStatementEnhancedForStatement      statement.scalaNTab = @lhs.scalaNTab
                                            lhs.scalaNTab = @statement.scalaNTab

    | ForStatementEnhancedForStatementNoVarModif
                                            statement.scalaNTab = @lhs.scalaNTab
                                            lhs.scalaNTab = @statement.scalaNTab

-- ------------------------------------------------
-- J2S scala code
-- ------------------------------------------------
attr J2s
     syn scalaCode :: String

sem J2s
    | J2s lhs.scalaCode = @packageDeclaration.scalaPackageDeclaration ++
                          @importDeclarations.scalaImportDeclaration ++
                          @typeDeclarations.scalaTypeDeclaration
          typeDeclarations.scalaNTab = ""

J2s (
PackageDeclaration [] ["code","java"]) 
NilImportDeclarations 
[TypeDeclarationClassDeclarationNormalCD NilModifiers "ClaseA" NilTypeParameters NilSuper NilInterfaces 
	[ClassBodyDeclClassMemberDeclFieldDeclaration NilModifiers (TypePrimitiveType TypePrimitiveNumericType_TypeIntegral_Int [])
		 [VariableDeclaratorIdAsig (VarDeclaratorId "currentSpeed") 
		(VariableInitializerExp (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNALiteral_IntegerLiteral_DecimalIntegerLiteral "100") []))))))],

		ClassBodyDeclClassMemberDeclFieldDeclaration NilModifiers 
			(TypePrimitiveType TypePrimitivePrimitivetypeBoolean []) 
			[VariableDeclaratorIdAsig (VarDeclaratorId "isMoving") 
			(VariableInitializerExp (ExpressionConditionalExpr 
			(ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray 
				(PrimaryNoNewArray (PrimNNALiteral_BooleanLiteral True) []))))))],

		ClassBodyDeclClassMemberDeclMethodDeclaration NilModifiers NilTypeParameters ResultTypeVoid 
			(MethodDeclaratorFormalPL "applyBrakes" FormalParameterListNil) NilThrows 
			(MethodBodyBlock [BlockStatementStatement 
				(StatementIf (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression 
					(PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PostfixExpressionExpressionName 
					(TypeName "isMoving" NilTypeName)) []))))) 
				(SWTSBlock [BlockStatementStatement (SWTSExpressionStatement 
				(ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression 
				(PostExpPrimaryPostfixZ (PrimNoNewArray (PrimaryNoNewArray (PostfixExpressionExpressionName 
				(TypeName "currentSpeed" NilTypeName)) [])) 
				[PostDecrement]))))]))]),

		ClassBodyDeclClassMemberDeclMethodDeclaration NilModifiers NilTypeParameters ResultTypeVoid 
			(MethodDeclaratorFormalPL "applyBrakes2" FormalParameterListNil) NilThrows 
			(MethodBodyBlock [BlockStatementStatement (StatementIfElse (ExpressionConditionalExpr 
			(ConditionalOrExpressionUnaryExpression 
			(PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PostfixExpressionExpressionName 
			(TypeName "isMoving" NilTypeName)) []))))) 
			(SWTSBlock [BlockStatementStatement (SWTSExpressionStatement (ExpressionConditionalExpr
			 (ConditionalOrExpressionUnaryExpression (PostExpPrimaryPostfixZ (PrimNoNewArray 
				(PrimaryNoNewArray (PostfixExpressionExpressionName (TypeName "currentSpeed" NilTypeName)) [])) 
				[PostDecrement]))))]) 
			(SWTSBlock [BlockStatementStatement (SWTSExpressionStatement 
			(ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary 
			(PrimNoNewArray (PrimaryNoNewArray (PrimNNAMethodInvocationMN (TypeName "System" (TypeName "err" 
			(TypeName "println" NilTypeName))) 
	
			[ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary 
			(PrimNoNewArray (PrimaryNoNewArray (PrimNNALiteral_StringLiteral "\"The bicycle has already stopped!\"") []))))]) []))))))]))]),
		ClassBodyDeclClassMemberDeclMethodDeclaration (Modifiers ModifierPublic NilModifiers) NilTypeParameters ResultTypeVoid (MethodDeclaratorFormalPL "edad" FormalParameterListNil) NilThrows (MethodBodyBlock [BlockStatementLocalVariableDeclarationStatement NilModifiers (TypePrimitiveType TypePrimitiveNumericType_TypeIntegral_Int []) [VariableDeclaratorIdAsig (VarDeclaratorId "age") (VariableInitializerExp (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNALiteral_IntegerLiteral_DecimalIntegerLiteral "20") []))))))],BlockStatementStatement (StatementIf (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PostfixExpressionExpressionName (TypeName "age" NilTypeName)) []))) :%: ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNALiteral_IntegerLiteral_DecimalIntegerLiteral "18") []))))) (SWTSBlock [BlockStatementStatement (SWTSExpressionStatement (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNAMethodInvocationMN (TypeName "System" (TypeName "out" (TypeName "print" NilTypeName))) [ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNALiteral_StringLiteral "\"Age is greater than 18\"") []))))]) []))))))]))])],

	TypeDeclarationClassDeclarationNormalCD NilModifiers "IfElseDemo" NilTypeParameters NilSuper NilInterfaces 
	[ClassBodyDeclClassMemberDeclMethodDeclaration (Modifiers ModifierPublic NilModifiers) NilTypeParameters ResultTypeVoid (MethodDeclaratorFormalPL "main" (FormalParameterListFormal NilVariableModifiers (TypePrimitiveType (TypeReferece (ReferenceTypeClassOrInterfaceType "String" NilTypeArguments [])) [ArrayType]) (VarDeclaratorId "args") FormalParameterListNil)) NilThrows (MethodBodyBlock [BlockStatementLocalVariableDeclarationStatement NilModifiers (TypePrimitiveType TypePrimitiveNumericType_TypeIntegral_Int []) [VariableDeclaratorIdAsig (VarDeclaratorId "testscore") (VariableInitializerExp (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNALiteral_IntegerLiteral_DecimalIntegerLiteral "76") []))))))],BlockStatementLocalVariableDeclarationStatement NilModifiers (TypePrimitiveType TypePrimitiveNumericType_TypeIntegral_Char []) [VariableDeclaratorId (VarDeclaratorId "grade")],BlockStatementStatement 

		(StatementIfElse (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PostfixExpressionExpressionName (TypeName "testscore" NilTypeName)) []))) :>=: ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNALiteral_IntegerLiteral_DecimalIntegerLiteral "90") []))))) (SWTSBlock [BlockStatementStatement (SWTSExpressionStatement (ExpressionAssignment (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PostfixExpressionExpressionName (TypeName "grade" NilTypeName)) [])))) AssignmentOp (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNALiteral_CharacterLiteral "'A'") [])))))))]) 

		(StatementIfElse (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PostfixExpressionExpressionName (TypeName "testscore" NilTypeName)) []))) :>=: ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNALiteral_IntegerLiteral_DecimalIntegerLiteral "80") []))))) (SWTSBlock [BlockStatementStatement (SWTSExpressionStatement (ExpressionAssignment (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PostfixExpressionExpressionName (TypeName "grade" NilTypeName)) [])))) AssignmentOp (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNALiteral_CharacterLiteral "'B'") [])))))))]) 

		(StatementIfElse (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PostfixExpressionExpressionName (TypeName "testscore" NilTypeName)) []))) :>=: ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNALiteral_IntegerLiteral_DecimalIntegerLiteral "70") []))))) (SWTSBlock [BlockStatementStatement (SWTSExpressionStatement (ExpressionAssignment (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PostfixExpressionExpressionName (TypeName "grade" NilTypeName)) [])))) AssignmentOp (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNALiteral_CharacterLiteral "'C'") [])))))))]) 

		(StatementIfElse (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PostfixExpressionExpressionName (TypeName "testscore" NilTypeName)) []))) :>=: ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNALiteral_IntegerLiteral_DecimalIntegerLiteral "60") []))))) (SWTSBlock [BlockStatementStatement (SWTSExpressionStatement (ExpressionAssignment (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PostfixExpressionExpressionName (TypeName "grade" NilTypeName)) [])))) AssignmentOp (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNALiteral_CharacterLiteral "'D'") [])))))))]) (SWTSBlock [BlockStatementStatement (SWTSExpressionStatement (ExpressionAssignment (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PostfixExpressionExpressionName (TypeName "grade" NilTypeName)) [])))) AssignmentOp (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNALiteral_CharacterLiteral "'F'") [])))))))]))))),BlockStatementStatement (SWTSExpressionStatement (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNAMethodInvocationMN (TypeName "System" (TypeName "out" (TypeName "println" NilTypeName))) [ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNALiteral_StringLiteral "\"Grade = \"") []))) :+: ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PostfixExpressionExpressionName (TypeName "grade" NilTypeName)) []))))]) []))))))])],TypeDeclarationClassDeclarationNormalCD NilModifiers "WhileDemo" NilTypeParameters NilSuper NilInterfaces [ClassBodyDeclClassMemberDeclMethodDeclaration (Modifiers ModifierPublic NilModifiers) NilTypeParameters ResultTypeVoid (MethodDeclaratorFormalPL "main" (FormalParameterListFormal NilVariableModifiers (TypePrimitiveType (TypeReferece (ReferenceTypeClassOrInterfaceType "String" NilTypeArguments [])) [ArrayType]) (VarDeclaratorId "args") FormalParameterListNil)) NilThrows (MethodBodyBlock [BlockStatementLocalVariableDeclarationStatement NilModifiers (TypePrimitiveType TypePrimitiveNumericType_TypeIntegral_Int []) [VariableDeclaratorIdAsig (VarDeclaratorId "count") (VariableInitializerExp (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNALiteral_IntegerLiteral_DecimalIntegerLiteral "1") []))))))],BlockStatementStatement (StatementWhile (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PostfixExpressionExpressionName (TypeName "count" NilTypeName)) []))) :<: ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNALiteral_IntegerLiteral_DecimalIntegerLiteral "11") []))))) (SWTSBlock [BlockStatementStatement (SWTSExpressionStatement (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNAMethodInvocationMN (TypeName "System" (TypeName "out" (TypeName "println" NilTypeName))) [ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNALiteral_StringLiteral "\"Count is: \"") []))) :+: ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PostfixExpressionExpressionName (TypeName "count" NilTypeName)) []))))]) [])))))),BlockStatementStatement (SWTSExpressionStatement (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostExpPrimaryPostfixZ (PrimNoNewArray (PrimaryNoNewArray (PostfixExpressionExpressionName (TypeName "count" NilTypeName)) [])) [PostIncrement]))))]))])],TypeDeclarationClassDeclarationNormalCD NilModifiers "DoWhileDemo" NilTypeParameters NilSuper NilInterfaces [ClassBodyDeclClassMemberDeclMethodDeclaration (Modifiers ModifierPublic (Modifiers ModifiersStatic NilModifiers)) NilTypeParameters ResultTypeVoid (MethodDeclaratorFormalPL "main" (FormalParameterListFormal NilVariableModifiers (TypePrimitiveType (TypeReferece (ReferenceTypeClassOrInterfaceType "String" NilTypeArguments [])) [ArrayType]) (VarDeclaratorId "args") FormalParameterListNil)) NilThrows (MethodBodyBlock [BlockStatementLocalVariableDeclarationStatement NilModifiers (TypePrimitiveType TypePrimitiveNumericType_TypeIntegral_Int []) [VariableDeclaratorIdAsig (VarDeclaratorId "count") (VariableInitializerExp (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNALiteral_IntegerLiteral_DecimalIntegerLiteral "1") []))))))],BlockStatementStatement (SWTSDoStatement (SWTSBlock [BlockStatementStatement (SWTSExpressionStatement (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNAMethodInvocationMN (TypeName "System" (TypeName "out" (TypeName "println" NilTypeName))) [ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNALiteral_StringLiteral "\"Count is: \"") []))) :+: ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PostfixExpressionExpressionName (TypeName "count" NilTypeName)) []))))]) [])))))),BlockStatementStatement (SWTSExpressionStatement (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostExpPrimaryPostfixZ (PrimNoNewArray (PrimaryNoNewArray (PostfixExpressionExpressionName (TypeName "count" NilTypeName)) [])) [PostIncrement]))))]) (ExpressionConditionalExpr (ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PostfixExpressionExpressionName (TypeName "count" NilTypeName)) []))) :<: ConditionalOrExpressionUnaryExpression (PostfixExpressionPrimary (PrimNoNewArray (PrimaryNoNewArray (PrimNNALiteral_IntegerLiteral_DecimalIntegerLiteral "11") []))))))])]]

